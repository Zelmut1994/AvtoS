#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AutoParts –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
"""
import os
import subprocess
import sys
import shutil
import zipfile
from datetime import datetime
import glob
import platform

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 8):
        errors.append(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
    else:
        print(f"‚úÖ Python {sys.version.split()[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyInstaller
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller {PyInstaller.__version__}")
    except ImportError:
        print("‚ö†Ô∏è PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "PyInstaller"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PySide6
    try:
        import PySide6
        print(f"‚úÖ PySide6 –Ω–∞–π–¥–µ–Ω –≤: {os.path.dirname(PySide6.__file__)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ Qt –ø–ª–∞–≥–∏–Ω—ã
        qt_dir = os.path.dirname(PySide6.__file__)
        platforms_path = os.path.join(qt_dir, "plugins", "platforms", "qwindows.dll")
        if not os.path.exists(platforms_path):
            errors.append(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω qwindows.dll –≤ {platforms_path}")
        else:
            print(f"‚úÖ qwindows.dll –Ω–∞–π–¥–µ–Ω")
            
    except ImportError:
        errors.append("‚ùå PySide6 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º spec —Ñ–∞–π–ª
    if not os.path.exists("build.spec"):
        errors.append("‚ùå –§–∞–π–ª build.spec –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚úÖ build.spec –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    if not os.path.exists("src/full_app.py"):
        errors.append("‚ùå –§–∞–π–ª src/full_app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
    
    if errors:
        print("\n‚õî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for error in errors:
            print(error)
        return False
    
    return True

def clean_build_artifacts():
    """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã PyInstaller
    for pattern in ["*.pyc", "__pycache__", "*.pyo"]:
        for path in glob.glob(f"**/{pattern}", recursive=True):
            try:
                if os.path.isdir(path):
                    shutil.rmtree(path)
                else:
                    os.remove(path)
            except:
                pass
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ runtime hooks
    for hook in glob.glob("qt_*.py"):
        try:
            os.remove(hook)
            print(f"  –£–¥–∞–ª–µ–Ω: {hook}")
        except:
            pass
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
    for dir_name in ["build", "dist", "build_new"]:
        if os.path.exists(dir_name):
            try:
                shutil.rmtree(dir_name)
                print(f"  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {dir_name}: {e}")

def build_executable():
    """–°–æ–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"""
    print("\nüî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É AutoParts...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
    build_dir = "build_new"
    os.makedirs(build_dir, exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller —Å spec-—Ñ–∞–π–ª–æ–º
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--clean",
        "--distpath", f"{build_dir}/dist",
        "--workpath", f"{build_dir}/work",
        "--log-level", "INFO",
        "build.spec"
    ]
    
    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller...")
    print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
                                 text=True, bufsize=1, universal_newlines=True)
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for line in process.stdout:
            line = line.strip()
            if line:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if "ERROR" in line or "WARNING" in line:
                    print(f"‚ö†Ô∏è {line}")
                elif "INFO: Building" in line:
                    print(f"üîß {line}")
                elif "completed successfully" in line:
                    print(f"‚úÖ {line}")
        
        process.wait()
        
        if process.returncode == 0:
            print("\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {process.returncode}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def verify_qt_plugins(app_dir):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Qt –ø–ª–∞–≥–∏–Ω–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Qt –ø–ª–∞–≥–∏–Ω–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ qwindows.dll
    platforms_paths = [
        os.path.join(app_dir, "_internal", "platforms"),
        os.path.join(app_dir, "platforms"),
    ]
    
    qwindows_found = False
    for path in platforms_paths:
        qwindows_path = os.path.join(path, "qwindows.dll")
        if os.path.exists(qwindows_path):
            print(f"‚úÖ qwindows.dll –Ω–∞–π–¥–µ–Ω: {qwindows_path}")
            qwindows_found = True
            break
    
    if not qwindows_found:
        print("‚ùå qwindows.dll –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å...")
        try:
            import PySide6
            qt_dir = os.path.dirname(PySide6.__file__)
            source_qwindows = os.path.join(qt_dir, "plugins", "platforms", "qwindows.dll")
            
            if os.path.exists(source_qwindows):
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é platforms –≤ _internal
                target_dir = os.path.join(app_dir, "_internal", "platforms")
                os.makedirs(target_dir, exist_ok=True)
                
                shutil.copy2(source_qwindows, target_dir)
                print(f"‚úÖ qwindows.dll —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {target_dir}")
            else:
                print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π qwindows.dll –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_qwindows}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ qwindows.dll: {e}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ DLL
    required_dlls = ["Qt6Core.dll", "Qt6Gui.dll", "Qt6Widgets.dll"]
    missing_dlls = []
    
    for dll in required_dlls:
        dll_path = os.path.join(app_dir, "_internal", dll)
        if not os.path.exists(dll_path):
            dll_path = os.path.join(app_dir, dll)
            if not os.path.exists(dll_path):
                missing_dlls.append(dll)
    
    if missing_dlls:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç DLL: {', '.join(missing_dlls)}")
    else:
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ Qt DLL –Ω–∞ –º–µ—Å—Ç–µ")
    
    return True

def create_launcher_batch(app_dir):
    """–°–æ–∑–¥–∞—Ç—å batch —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    batch_content = """@echo off
echo Starting AutoParts...
echo.

REM –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd /d "%~dp0"

REM –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Qt
set QT_PLUGIN_PATH=%~dp0_internal
set QT_QPA_PLATFORM_PLUGIN_PATH=%~dp0_internal\\platforms

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ qwindows.dll
if exist "_internal\\platforms\\qwindows.dll" (
    echo [OK] Platform plugin found
) else (
    echo [ERROR] Platform plugin not found!
    echo Please reinstall the application.
    pause
    exit /b 1
)

REM –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
AutoParts.exe %*

REM –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
if errorlevel 1 (
    echo.
    echo Application exited with error code %errorlevel%
    pause
)
"""
    
    batch_path = os.path.join(app_dir, "AutoParts_launcher.bat")
    with open(batch_path, 'w', encoding='utf-8') as f:
        f.write(batch_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω launcher: {batch_path}")

def test_build():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    exe_path = "build_new/dist/AutoParts/AutoParts.exe"
    app_dir = os.path.dirname(exe_path)
    
    if not os.path.exists(exe_path):
        print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    total_size = 0
    file_count = 0
    for dirpath, dirnames, filenames in os.walk(app_dir):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
            file_count += 1
    
    size_mb = total_size / (1024 * 1024)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
    print(f"   - –§–∞–π–ª–æ–≤: {file_count}")
    print(f"   - –ü—É—Ç—å: {os.path.abspath(exe_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qt –ø–ª–∞–≥–∏–Ω—ã
    verify_qt_plugins(app_dir)
    
    # –°–æ–∑–¥–∞–µ–º launcher
    create_launcher_batch(app_dir)
    
    return True

def create_distribution_package():
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–∫–µ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞"""
    print("\nüì¶ –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"build_new/AutoParts_{timestamp}.zip"
    
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        app_dir = "build_new/dist/AutoParts"
        for root, dirs, files in os.walk(app_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, "build_new/dist")
                zipf.write(file_path, arcname)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
    size_mb = os.path.getsize(zip_filename) / (1024 * 1024)
    print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_filename} ({size_mb:.1f} MB)")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ AutoParts Build Script v2.0")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üíª {platform.system()} {platform.release()}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        print("\nüí• –°–±–æ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        sys.exit(1)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    clean_build_artifacts()
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if build_executable():
        if test_build():
            create_distribution_package()
            print("\n" + "=" * 60)
            print("üéâ –ì–û–¢–û–í–û! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: build_new/dist/AutoParts/")
            print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ AutoParts_launcher.bat –¥–ª—è —Å—Ç–∞—Ä—Ç–∞")
            print("=" * 60)
        else:
            print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã")
            sys.exit(1)
    else:
        print("\nüí• –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

if __name__ == "__main__":
    main()