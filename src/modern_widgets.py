"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Å SVG –∏–∫–æ–Ω–∫–∞–º–∏
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QLineEdit, QTableWidget, QFrame, QGroupBox, QComboBox,
    QTableWidgetItem, QHeaderView, QAbstractItemView
)
from PySide6.QtCore import Qt, Signal, QTimer
from PySide6.QtGui import QFont

try:
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ SVG –∑–∞–≥—Ä—É–∑—á–∏–∫, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ–π
    try:
        from .icon_loader import get_icon, get_pixmap
        ICONS_AVAILABLE = True
        print("‚úÖ SVG –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–∫–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω")
    except ImportError:
        from .simple_icon_loader import get_icon, get_pixmap
        ICONS_AVAILABLE = True
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–∫–æ–Ω–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω")
except ImportError:
    print("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏–∫–æ–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏")
    ICONS_AVAILABLE = False


class ModernButton(QPushButton):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å SVG –∏–∫–æ–Ω–∫–æ–π"""
    
    def __init__(self, text: str = "", icon_name: str = "", parent=None):
        super().__init__(text, parent)
        
        if icon_name and ICONS_AVAILABLE:
            self.setIcon(get_icon(icon_name))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.setMinimumHeight(36)
        self.setStyleSheet("""
            QPushButton {
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: 500;
            }
        """)

class ModernSearchBar(QWidget):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
    
    textChanged = Signal(str)
    searchTriggered = Signal(str)
    
    def __init__(self, placeholder: str = "–ü–æ–∏—Å–∫...", parent=None):
        super().__init__(parent)
        self.setup_ui(placeholder)
    
    def setup_ui(self, placeholder: str):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText(placeholder)
        self.search_input.textChanged.connect(self.textChanged.emit)
        self.search_input.returnPressed.connect(self._on_search)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_button = ModernButton("", "search")
        self.search_button.setMaximumWidth(40)
        self.search_button.clicked.connect(self._on_search)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_button = ModernButton("", "delete")
        self.clear_button.setMaximumWidth(40)
        self.clear_button.clicked.connect(self.clear)
        self.clear_button.setVisible(False)
        
        layout.addWidget(self.search_input)
        layout.addWidget(self.search_button)
        layout.addWidget(self.clear_button)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        self.search_input.textChanged.connect(self._update_clear_button)
    
    def _on_search(self):
        text = self.search_input.text().strip()
        self.searchTriggered.emit(text)
    
    def _update_clear_button(self, text: str):
        self.clear_button.setVisible(bool(text.strip()))
    
    def clear(self):
        self.search_input.clear()
        self.search_input.setFocus()
    
    def text(self) -> str:
        return self.search_input.text()

class ActionButtonGroup(QWidget):
    """–ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.buttons = {}
    
    def setup_ui(self):
        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(8)
    
    def add_action(self, name: str, text: str, icon_name: str = "", 
                   callback=None, style_class: str = ""):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è"""
        button = ModernButton(text, icon_name)
        
        if style_class:
            button.setProperty("styleClass", style_class)
        
        if callback:
            button.clicked.connect(callback)
        
        self.buttons[name] = button
        self.layout.addWidget(button)
        return button
    
    def get_button(self, name: str) -> QPushButton:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ –∏–º–µ–Ω–∏"""
        return self.buttons.get(name)
    
    def set_enabled(self, name: str, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É"""
        button = self.get_button(name)
        if button:
            button.setEnabled(enabled)

class ModernDataTable(QTableWidget):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_table()
    
    def setup_table(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.setAlternatingRowColors(True)
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setSelectionMode(QAbstractItemView.SingleSelection)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.verticalHeader().setVisible(False)
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QTableWidget {
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background-color: white;
                selection-background-color: #e3f2fd;
            }
            QTableWidget::item {
                padding: 12px 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 12px 8px;
                border: none;
                border-bottom: 2px solid #e0e0e0;
                font-weight: 600;
            }
        """)
    
    def set_data(self, headers: list, data: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        self.setRowCount(len(data))
        self.setColumnCount(len(headers))
        self.setHorizontalHeaderLabels(headers)
        
        for row_idx, row_data in enumerate(data):
            for col_idx, cell_data in enumerate(row_data):
                item = QTableWidgetItem(str(cell_data))
                self.setItem(row_idx, col_idx, item)

class ModernStatCard(QFrame):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, title: str, value: str, icon_name: str = "", 
                 color: str = "#2196F3", parent=None):
        super().__init__(parent)
        self.setup_ui(title, value, icon_name, color)
    
    def setup_ui(self, title: str, value: str, icon_name: str, color: str):
        self.setFrameStyle(QFrame.Box)
        self.setStyleSheet(f"""
            QFrame {{
                border: 1px solid #e0e0e0;
                border-radius: 12px;
                background-color: white;
                padding: 16px;
            }}
            QLabel#value {{
                color: {color};
                font-size: 24pt;
                font-weight: 700;
            }}
            QLabel#title {{
                color: #666;
                font-size: 10pt;
                font-weight: 500;
            }}
        """)
        
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_layout = QHBoxLayout()
        
        if icon_name and ICONS_AVAILABLE:
            icon_label = QLabel()
            icon_label.setPixmap(get_pixmap(icon_name, color, 20))
            header_layout.addWidget(icon_label)
        
        title_label = QLabel(title)
        title_label.setObjectName("title")
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        self.value_label = QLabel(value)
        self.value_label.setObjectName("value")
        self.value_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.value_label)
    
    def update_value(self, new_value: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"""
        self.value_label.setText(new_value)

class ModernGroupBox(QGroupBox):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å –∏–∫–æ–Ω–∫–æ–π"""
    
    def __init__(self, title: str, icon_name: str = "", parent=None):
        if icon_name and not ICONS_AVAILABLE:
            # Fallback –Ω–∞ —ç–º–æ–¥–∂–∏ –µ—Å–ª–∏ SVG –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            emoji_map = {
                'parts': 'üîß', 'sales': 'üí∞', 'reports': 'üìä',
                'search': 'üîç', 'cart': 'üõí'
            }
            icon_text = emoji_map.get(icon_name, 'üìÅ')
            title = f"{icon_text} {title}"
        
        super().__init__(title, parent)
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QGroupBox {
                font-weight: 600;
                font-size: 11pt;
                color: #1976d2;
                border: 2px solid #e0e0e0;
                border-radius: 12px;
                margin-top: 20px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top left;
                padding: 5px 15px;
                background: white;
                border-radius: 6px;
                margin-left: 10px;
            }
        """)

class ModernToolbar(QWidget):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.actions = {}
    
    def setup_ui(self):
        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(16, 8, 16, 8)
        self.layout.setSpacing(8)
        
        # –°—Ç–∏–ª–∏ –ø–∞–Ω–µ–ª–∏
        self.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
                border-bottom: 1px solid #e0e0e0;
            }
        """)
    
    def add_action(self, name: str, text: str, icon_name: str = "", 
                   callback=None) -> QPushButton:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–Ω–µ–ª—å"""
        button = ModernButton(text, icon_name)
        
        if callback:
            button.clicked.connect(callback)
        
        self.actions[name] = button
        self.layout.addWidget(button)
        return button
    
    def add_spacer(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫"""
        self.layout.addStretch()
    
    def add_widget(self, widget: QWidget):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç"""
        self.layout.addWidget(widget)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
class ModernWindow(QWidget):
    """–ü—Ä–∏–º–µ—Ä –æ–∫–Ω–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ModernToolbar()
        toolbar.add_action("add", "–î–æ–±–∞–≤–∏—Ç—å", "add")
        toolbar.add_action("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "edit")
        toolbar.add_action("delete", "–£–¥–∞–ª–∏—Ç—å", "delete")
        toolbar.add_spacer()
        
        # –ü–æ–∏—Å–∫
        search_bar = ModernSearchBar("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        toolbar.add_widget(search_bar)
        
        layout.addWidget(toolbar)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        main_layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        left_panel = QVBoxLayout()
        
        stats_group = ModernGroupBox("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "reports")
        stats_layout = QVBoxLayout(stats_group)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        parts_card = ModernStatCard("–í—Å–µ–≥–æ –∑–∞–ø—á–∞—Å—Ç–µ–π", "150", "parts")
        sales_card = ModernStatCard("–ü—Ä–æ–¥–∞–∂–∏", "50 000 ‚ÇΩ", "sales", "#4CAF50")
        
        stats_layout.addWidget(parts_card)
        stats_layout.addWidget(sales_card)
        
        left_panel.addWidget(stats_group)
        left_panel.addStretch()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ç–∞–±–ª–∏—Ü–µ–π
        right_panel = QVBoxLayout()
        
        table_group = ModernGroupBox("–î–∞–Ω–Ω—ã–µ", "parts")
        table_layout = QVBoxLayout(table_group)
        
        # –¢–∞–±–ª–∏—Ü–∞
        table = ModernDataTable()
        table.set_data(
            ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞"],
            [["1", "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π", "500"], ["2", "–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è", "300"]]
        )
        
        table_layout.addWidget(table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions = ActionButtonGroup()
        actions.add_action("refresh", "–û–±–Ω–æ–≤–∏—Ç—å", "refresh")
        actions.add_action("export", "–≠–∫—Å–ø–æ—Ä—Ç", "export")
        
        table_layout.addWidget(actions)
        
        right_panel.addWidget(table_group)
        
        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        main_layout.addLayout(left_panel, 1)
        main_layout.addLayout(right_panel, 2)
        
        layout.addLayout(main_layout)
        
        self.setWindowTitle("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã AutoParts")
        self.resize(800, 600) 