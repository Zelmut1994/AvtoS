import sys
from datetime import datetime

# --- –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã ---
try:
    import resources_rc
except ImportError:
    print("‚ö†Ô∏è –§–∞–π–ª —Ä–µ—Å—É—Ä—Å–æ–≤ (resources_rc.py) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç scripts/compile_resources.py")
# --------------------------------------------------

from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QTabWidget, QPushButton, QLabel, 
                             QMessageBox, QDialog, QFormLayout, QLineEdit,
                             QSpinBox, QDoubleSpinBox, QTextEdit, QTableWidget,
                             QTableWidgetItem, QHeaderView, QComboBox,
                             QAbstractItemView, QSplitter, QDateEdit, QGroupBox,
                             QScrollArea, QFrame, QGridLayout, QCheckBox,
                             QTreeView)
from PySide6.QtCore import Qt, QTimer, QDate
from PySide6.QtGui import (QFont, QAction, QColor, QStandardItemModel,
                           QStandardItem)
from datetime import datetime, timedelta

from database_simple import db
from styles_enhanced import get_enhanced_complete_style, ENHANCED_COLORS, ICONS, ENHANCED_DIALOG_STYLES
from settings_manager import get_settings
from settings_dialog import show_settings_dialog
from parts_dialogs import AddPartDialog, EditPartDialog

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
APP_NAME = "–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π"
# ... existing code ...
class PartsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, main_window=None):
        super().__init__()
        self.main_window = main_window
        self.setup_ui()
        self.load_parts()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
        header_layout = QHBoxLayout()
        
        title = QLabel("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç—è–º–∏")
        title.setProperty("class", "section-title")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É, –Ω–∞–∑–≤–∞–Ω–∏—é, –º–∞—Ä–∫–µ...")
        self.search_input.setMaximumWidth(300)
        self.search_input.textChanged.connect(self.search_parts)
        header_layout.addWidget(self.search_input)
        
        layout.addLayout(header_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
        add_btn.setProperty("class", "success")
        add_btn.clicked.connect(self.add_part)
        actions_layout.addWidget(add_btn)
        
        self.edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.edit_btn.setProperty("class", "warning")
        self.edit_btn.setEnabled(False)
        self.edit_btn.clicked.connect(self.edit_part)
        actions_layout.addWidget(self.edit_btn)
        
        self.delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setProperty("class", "danger")
        self.delete_btn.setEnabled(False)
        self.delete_btn.clicked.connect(self.delete_part)
        actions_layout.addWidget(self.delete_btn)
        
        actions_layout.addStretch()
        
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_parts)
        actions_layout.addWidget(refresh_btn)
        
        layout.addLayout(actions_layout)
        
        # –î–µ—Ä–µ–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.tree = QTreeView()
        self.tree.setAlternatingRowColors(True)
        self.tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tree.setEditTriggers(QAbstractItemView.NoEditTriggers)
        
        self.model = QStandardItemModel()
        self.tree.setModel(self.model)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
        self.tree.selectionModel().selectionChanged.connect(self.on_selection_changed)
        
        layout.addWidget(self.tree)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.stats_label.setStyleSheet("color: #666; font-style: italic;")
        layout.addWidget(self.stats_label)
    
    def load_parts(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        self.model.clear()
        self.model.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê—Ä—Ç–∏–∫—É–ª", "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", 
            "–ö–æ–ª-–≤–æ", "–ó–∞–∫—É–ø. —Ü–µ–Ω–∞", "–†–æ–∑–Ω. —Ü–µ–Ω–∞"
        ])
        
        parts = db.get_all_parts()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for part in parts:
            category = part.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            if category not in categories:
                categories[category] = []
            categories[category].append(part)
            
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        for category_name, parts_in_category in sorted(categories.items()):
            category_item = QStandardItem(f"üìÅ {category_name} ({len(parts_in_category)})")
            category_item.setEditable(False)
            category_item.setData(-1, Qt.UserRole) # ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            self.model.appendRow(category_item)
            
            for part in sorted(parts_in_category, key=lambda x: x['name']):
                name_item = QStandardItem(part['name'])
                name_item.setData(part['id'], Qt.UserRole) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—á–∞—Å—Ç–∏
                
                article_item = QStandardItem(part['article'])
                brand_item = QStandardItem(part['brand'])
                model_item = QStandardItem(part['car_model'])
                
                qty_item = QStandardItem(str(part['quantity']))
                if part['quantity'] == 0:
                    qty_item.setBackground(QColor("#FF5252"))
                    qty_item.setForeground(QColor("white"))
                elif part['quantity'] <= 2:
                    qty_item.setBackground(QColor("#FFC107"))
                
                buy_price_item = QStandardItem(f"{part['buy_price']:.2f} ‚ÇΩ")
                sell_price_item = QStandardItem(f"{part['sell_price']:.2f} ‚ÇΩ")
                
                category_item.appendRow([
                    name_item, article_item, brand_item, model_item, 
                    qty_item, buy_price_item, sell_price_item
                ])

        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
        self.tree.header().setSectionResizeMode(0, QHeaderView.Stretch)
        for i in range(1, self.model.columnCount()):
            self.tree.header().setSectionResizeMode(i, QHeaderView.ResizeToContents)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_parts = len(parts)
        total_quantity = sum(part['quantity'] for part in parts)
        in_stock = len([p for p in parts if p['quantity'] > 0])
        
        self.stats_label.setText(
            f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_parts} | "
            f"–í –Ω–∞–ª–∏—á–∏–∏: {in_stock} | "
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç."
        )
    
    def search_parts(self):
        """–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—è–º, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π."""
        query = self.search_input.text().strip().lower()

        # –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-—Å—Ç–∞—Ä–æ–º—É, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        # –î–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫: –ø–æ–∏—Å–∫ –æ—á–∏—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        if not query:
            self.load_parts()
            return

        try:
            all_parts = db.get_all_parts()
            
            filtered_parts = []
            for part in all_parts:
                if (query in str(part['article']).lower() or 
                    query in str(part['name']).lower() or
                    query in str(part.get('brand', '')).lower() or
                    query in str(part.get('car_model', '')).lower() or
                    query in str(part.get('category', '')).lower()):
                    filtered_parts.append(part)
            
            self.model.clear()
            self.model.setHorizontalHeaderLabels([
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê—Ä—Ç–∏–∫—É–ª", "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", 
                "–ö–æ–ª-–≤–æ", "–ó–∞–∫—É–ø. —Ü–µ–Ω–∞", "–†–æ–∑–Ω. —Ü–µ–Ω–∞", "ID"
            ])
            
            if not filtered_parts:
                return
            
            self.model.setRowCount(len(filtered_parts))
            for i, part in enumerate(filtered_parts):
                self.model.setItem(i, 0, QStandardItem(part['name']))
                self.model.setItem(i, 1, QStandardItem(part['article']))
                self.model.setItem(i, 2, QStandardItem(part.get('brand', '')))
                self.model.setItem(i, 3, QStandardItem(part.get('car_model', '')))
                
                qty_item = QStandardItem(str(part['quantity']))
                if part['quantity'] == 0:
                    qty_item.setBackground(QColor("#FF5252"))
                    qty_item.setForeground(QColor("white"))
                elif part['quantity'] <= 2:
                    qty_item.setBackground(QColor("#FFC107"))
                self.model.setItem(i, 4, qty_item)
                
                self.model.setItem(i, 5, QStandardItem(f"{float(part['buy_price']):.2f} ‚ÇΩ"))
                self.model.setItem(i, 6, QStandardItem(f"{float(part['sell_price']):.2f} ‚ÇΩ"))
                
                id_item = QStandardItem(str(part['id']))
                id_item.setData(part['id'], Qt.UserRole)
                self.model.setItem(i, 7, id_item)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
    def on_selection_changed(self, selected, deselected):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –¥–µ—Ä–µ–≤–µ"""
        indexes = self.tree.selectionModel().selectedIndexes()
        has_selection = len(indexes) > 0
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–ø—á–∞—Å—Ç—å (–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        if has_selection:
            part_id = self.model.itemFromIndex(indexes[0]).data(Qt.UserRole)
            is_part = part_id is not None and part_id > 0
            self.edit_btn.setEnabled(is_part)
            self.delete_btn.setEnabled(is_part)
        else:
            self.edit_btn.setEnabled(False)
            self.delete_btn.setEnabled(False)
    
    def add_part(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"""
        dialog = AddPartDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.load_parts()
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            if self.main_window:
                self.main_window.refresh_all_data()
    
    def edit_part(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"""
        indexes = self.tree.selectionModel().selectedIndexes()
        if not indexes:
            return
            
        item = self.model.itemFromIndex(indexes[0])
        part_id = item.data(Qt.UserRole)
        
        if part_id and part_id > 0:
            part_data = db.get_part_by_id(part_id)
            
            if part_data:
                dialog = EditPartDialog(part_data, self)
                if dialog.exec() == QDialog.Accepted:
                    self.load_parts()
                    if self.main_window:
                        self.main_window.refresh_all_data()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏")
    
    def delete_part(self):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å"""
        indexes = self.tree.selectionModel().selectedIndexes()
        if not indexes:
            return
            
        item = self.model.itemFromIndex(indexes[0])
        part_id = item.data(Qt.UserRole)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        # –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ item.row() –≤–µ—Ä–Ω–µ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è,
        # –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ index.row() –∏ index.parent()
        index = indexes[0]
        parent = index.parent()
        row = index.row()
        
        # –ê—Ä—Ç–∏–∫—É–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ (–∏–Ω–¥–µ–∫—Å 1)
        article_item = self.model.itemFromIndex(parent.child(row, 1))
        article = article_item.text() if article_item else ""
        
        if part_id and part_id > 0:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            msg_box.setText(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å {article}?")
            msg_box.setIcon(QMessageBox.Question)
            
            yes_button = msg_box.addButton("–î–∞", QMessageBox.YesRole)
            no_button = msg_box.addButton("–ù–µ—Ç", QMessageBox.NoRole)
            
            msg_box.exec()

            if msg_box.clickedButton() == yes_button:
                if db.delete_part(part_id):
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø—á–∞—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
                    self.load_parts()
                    if self.main_window:
                        self.main_window.refresh_all_data()
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")

class SalesWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self, main_window=None):
        super().__init__()
        self.main_window = main_window
        self.cart_items = []  # –ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.setup_ui()
    
    def setup_ui(self):
        layout = QHBoxLayout(self)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        title_label = QLabel("üí∞ –ü—Ä–æ–¥–∞–∂–∏")
        title_label.setProperty("class", "section-title")
        left_layout.addWidget(title_label)
        
        search_layout = QHBoxLayout()
        search_label = QLabel("–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:")
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ...")
        self.search_input.textChanged.connect(self.search_products)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.search_input)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ")
        refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
        refresh_btn.setMaximumWidth(40)
        refresh_btn.setProperty("class", "small")
        refresh_btn.clicked.connect(self.load_products)
        search_layout.addWidget(refresh_btn)
        
        left_layout.addLayout(search_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.products_table = QTableWidget()
        self.products_table.setColumnCount(5)
        self.products_table.setHorizontalHeaderLabels([
            "ID", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å—Ç–∞—Ç–æ–∫", "–¶–µ–Ω–∞"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        products_header = self.products_table.horizontalHeader()
        products_header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # ID
        products_header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –ê—Ä—Ç–∏–∫—É–ª
        products_header.setSectionResizeMode(2, QHeaderView.Stretch)           # –ù–∞–∑–≤–∞–Ω–∏–µ
        products_header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –û—Å—Ç–∞—Ç–æ–∫
        products_header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –¶–µ–Ω–∞
        
        self.products_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.products_table.setAlternatingRowColors(True)
        self.products_table.itemDoubleClicked.connect(self.add_to_cart)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–∫–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
        self.products_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
                text-decoration: none;
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #2196F3;
                font-weight: bold;
            }
        """)
        
        left_layout.addWidget(self.products_table)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        add_to_cart_btn = QPushButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
        add_to_cart_btn.setProperty("class", "large")
        add_to_cart_btn.clicked.connect(self.add_to_cart)
        left_layout.addWidget(add_to_cart_btn)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ—Ä–∑–∏–Ω–∞
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        
        cart_title = QLabel("üõí –ö–æ—Ä–∑–∏–Ω–∞")
        cart_title.setProperty("class", "subsection-title")
        right_layout.addWidget(cart_title)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã
        self.cart_table = QTableWidget()
        self.cart_table.setColumnCount(6)
        self.cart_table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–°—É–º–º–∞", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        
        cart_header = self.cart_table.horizontalHeader()
        cart_header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # –ê—Ä—Ç–∏–∫—É–ª
        cart_header.setSectionResizeMode(1, QHeaderView.Stretch)           # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        cart_header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cart_header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –¶–µ–Ω–∞
        cart_header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –°—É–º–º–∞
        cart_header.setSectionResizeMode(5, QHeaderView.Fixed)             # –ö–Ω–æ–ø–∫–∏ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π
        self.cart_table.setColumnWidth(5, 70)  # –®–∏—Ä–∏–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        
        self.cart_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.cart_table.setAlternatingRowColors(True)
        self.cart_table.verticalHeader().setVisible(False)
        self.cart_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        self.cart_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
                text-decoration: none;
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #2196F3;
                font-weight: bold;
            }
        """)
        
        right_layout.addWidget(self.cart_table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
        cart_buttons_layout = QHBoxLayout()
        
        remove_btn = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
        remove_btn.setProperty("class", "danger")
        remove_btn.clicked.connect(self.remove_from_cart)
        cart_buttons_layout.addWidget(remove_btn)
        
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
        clear_btn.setProperty("class", "warning")
        clear_btn.clicked.connect(self.clear_cart)
        cart_buttons_layout.addWidget(clear_btn)
        
        cart_buttons_layout.addStretch()
        right_layout.addLayout(cart_buttons_layout)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        self.total_label = QLabel("–ò—Ç–æ–≥–æ: 0.00 ‚ÇΩ")
        self.total_label.setProperty("class", "total")
        right_layout.addWidget(self.total_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
        checkout_btn = QPushButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
        checkout_btn.setProperty("class", "success")
        checkout_btn.setProperty("class", "large")
        checkout_btn.clicked.connect(self.checkout)
        right_layout.addWidget(checkout_btn)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addWidget(left_panel, 3)  # 3/5 —à–∏—Ä–∏–Ω—ã
        layout.addWidget(right_panel, 2)  # 2/5 —à–∏—Ä–∏–Ω—ã
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        self.load_products()
    
    def load_products(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã"""
        parts = db.get_all_parts()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0
        in_stock_parts = [p for p in parts if p['quantity'] > 0]
        
        self.products_table.setRowCount(len(in_stock_parts))
        
        for row, part in enumerate(in_stock_parts):
            self.products_table.setItem(row, 0, QTableWidgetItem(str(part['id'])))
            self.products_table.setItem(row, 1, QTableWidgetItem(part['article']))
            self.products_table.setItem(row, 2, QTableWidgetItem(part['name']))
            self.products_table.setItem(row, 3, QTableWidgetItem(str(part['quantity'])))
            self.products_table.setItem(row, 4, QTableWidgetItem(f"{part['sell_price']:.2f} ‚ÇΩ"))
    
    def search_products(self):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        query = self.search_input.text().strip()
        
        if not query:
            self.load_products()
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python-side —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –≤ –º–æ–¥—É–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
            all_parts = db.get_all_parts()
            query_lower = query.lower()
            
            filtered_parts = []
            for part in all_parts:
                if (query_lower in part['article'].lower() or 
                    query_lower in part['name'].lower() or
                    query_lower in part['brand'].lower() or
                    query_lower in part['car_model'].lower() or
                    query_lower in part['category'].lower()):
                    filtered_parts.append(part)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0
            in_stock_parts = [p for p in filtered_parts if p['quantity'] > 0]
            
            self.products_table.setRowCount(len(in_stock_parts))
            
            for row, part in enumerate(in_stock_parts):
                self.products_table.setItem(row, 0, QTableWidgetItem(str(part['id'])))
                self.products_table.setItem(row, 1, QTableWidgetItem(part['article']))
                self.products_table.setItem(row, 2, QTableWidgetItem(part['name']))
                self.products_table.setItem(row, 3, QTableWidgetItem(str(part['quantity'])))
                self.products_table.setItem(row, 4, QTableWidgetItem(f"{part['sell_price']:.2f} ‚ÇΩ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def add_to_cart(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        current_row = self.products_table.currentRow()
        if current_row >= 0:
            part_id = int(self.products_table.item(current_row, 0).text())
            article = self.products_table.item(current_row, 1).text()
            name = self.products_table.item(current_row, 2).text()
            available = int(self.products_table.item(current_row, 3).text())
            price = float(self.products_table.item(current_row, 4).text().replace(' ‚ÇΩ', ''))
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            from PySide6.QtWidgets import QInputDialog
            quantity, ok = QInputDialog.getInt(
                self, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {article} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available}):",
                1  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            if ok:
                if quantity <= 0:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                if quantity > available:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ!\n–î–æ—Å—Ç—É–ø–Ω–æ: {available}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {quantity}")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                existing_item = None
                for item in self.cart_items:
                    if item['part_id'] == part_id:
                        existing_item = item
                        break
                
                if existing_item:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    new_quantity = existing_item['quantity'] + quantity
                    if new_quantity <= available:
                        existing_item['quantity'] = new_quantity
                    else:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ!\n–î–æ—Å—Ç—É–ø–Ω–æ: {available}")
                        return
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    self.cart_items.append({
                        'part_id': part_id,
                        'article': article,
                        'name': name,
                        'quantity': quantity,
                        'price': price
                    })
                
                self.update_cart_display()
    
    def update_cart_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
        self.cart_table.setRowCount(len(self.cart_items))
        
        total = 0
        for row, item in enumerate(self.cart_items):
            item_total = item['quantity'] * item['price']
            total += item_total
            
            # –ê—Ä—Ç–∏–∫—É–ª
            article_item = QTableWidgetItem(item['article'])
            article_item.setTextAlignment(Qt.AlignCenter)
            self.cart_table.setItem(row, 0, article_item)
            
            # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            self.cart_table.setItem(row, 1, QTableWidgetItem(item['name']))
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_item = QTableWidgetItem(f"{item['quantity']} —à—Ç.")
            qty_item.setTextAlignment(Qt.AlignCenter)
            self.cart_table.setItem(row, 2, qty_item)
            
            # –¶–µ–Ω–∞
            price_item = QTableWidgetItem(f"{item['price']:.2f} ‚ÇΩ")
            price_item.setTextAlignment(Qt.AlignRight)
            self.cart_table.setItem(row, 3, price_item)
            
            # –°—É–º–º–∞
            total_item = QTableWidgetItem(f"{item_total:.2f} ‚ÇΩ")
            total_item.setTextAlignment(Qt.AlignRight)
            total_item.setFont(QFont("Arial", 10, QFont.Bold))
            self.cart_table.setItem(row, 4, total_item)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ª–µ–≤–∞
            button_container = QWidget()
            button_layout = QHBoxLayout(button_container)
            button_layout.setContentsMargins(2, 2, 10, 2)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞, –±–æ–ª—å—à–µ —Å–ø—Ä–∞–≤–∞
            
            edit_btn = QPushButton("‚öôÔ∏è")
            edit_btn.setToolTip("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É")
            edit_btn.setFixedSize(45, 26)  # –ï—â–µ –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä
            edit_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
                QPushButton:pressed {
                    background-color: #0D47A1;
                }
            """)
            edit_btn.clicked.connect(lambda checked, r=row: self.edit_item(r))
            
            button_layout.addWidget(edit_btn)
            button_layout.addStretch()  # –†–∞—Å—Ç—è–∂–∫–∞ —Å–ø—Ä–∞–≤–∞
            self.cart_table.setCellWidget(row, 5, button_container)
            
            # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            self.cart_table.setRowHeight(row, 45)
        
        self.total_label.setText(f"–ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ")
    
    def edit_item(self, row):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è v3)"""
        if not (0 <= row < len(self.cart_items)):
            return
            
        item = self.cart_items[row]
        current_price = item['price']
        current_qty = item['quantity']
        
        part = db.get_part_by_id(item['part_id'])
        if not part:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        available = part['quantity'] + current_qty
        
        try:
            dialog = QDialog(self)
            dialog.setModal(True)
            dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            dialog.setFixedSize(500, 450)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –±–µ–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
            dialog.setStyleSheet("""
                QDialog { 
                    background-color: #f5f5f5; 
                }
                QLabel {
                    color: #333;
                }
                QLineEdit, QSpinBox {
                    padding: 8px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    background: white;
                }
                QPushButton {
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                }
            """)

            # –ì–ª–∞–≤–Ω—ã–π layout —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
            main_layout = QVBoxLayout(dialog)
            main_layout.setContentsMargins(20, 20, 20, 20)
            main_layout.setSpacing(20)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = QLabel("‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            title.setAlignment(Qt.AlignCenter)
            title.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 10px;")
            main_layout.addWidget(title)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º QWidget –≤–º–µ—Å—Ç–æ QFrame)
            info_widget = QWidget()
            info_widget.setStyleSheet("""
                QWidget {
                    background: white;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                }
            """)
            info_layout = QFormLayout(info_widget)
            info_layout.setContentsMargins(15, 15, 15, 15)
            info_layout.setSpacing(10)
            
            # –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            name_label = QLabel(item.get('name', 'N/A'))
            name_label.setWordWrap(True)
            article_label = QLabel(item.get('article', 'N/A'))
            price_label = QLabel(f"{current_price:.2f} ‚ÇΩ")
            
            info_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_label)
            info_layout.addRow("–ê—Ä—Ç–∏–∫—É–ª:", article_label)
            info_layout.addRow("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:", price_label)
            
            main_layout.addWidget(info_widget)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            qty_widget = QWidget()
            qty_widget.setStyleSheet("""
                QWidget {
                    background: white;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                }
            """)
            qty_layout = QHBoxLayout(qty_widget)
            qty_layout.setContentsMargins(15, 15, 15, 15)
            
            qty_layout.addWidget(QLabel(f"–í –Ω–∞–ª–∏—á–∏–∏: {available} —à—Ç."))
            qty_layout.addStretch()
            qty_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
            
            qty_input = QSpinBox()
            qty_input.setMinimum(1)
            qty_input.setMaximum(available)
            qty_input.setValue(current_qty)
            qty_input.setSuffix(" —à—Ç.")
            qty_layout.addWidget(qty_input)
            
            main_layout.addWidget(qty_widget)
            
            # –°–∫–∏–¥–∫–∞
            discount_widget = QWidget()
            discount_widget.setStyleSheet("""
                QWidget {
                    background: white;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                }
            """)
            discount_layout = QVBoxLayout(discount_widget)
            discount_layout.setContentsMargins(15, 15, 15, 15)
            
            discount_layout.addWidget(QLabel("–°–∫–∏–¥–∫–∞ (—Å—É–º–º–∞):"))
            
            discount_input = QLineEdit("0")
            discount_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏")
            discount_layout.addWidget(discount_input)
            
            preview_label = QLabel(f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
            preview_label.setAlignment(Qt.AlignCenter)
            preview_label.setStyleSheet("""
                padding: 8px;
                background: #e8f5e9;
                border: 1px solid #4caf50;
                border-radius: 4px;
                color: #2e7d32;
                font-weight: bold;
            """)
            discount_layout.addWidget(preview_label)
            
            def update_preview():
                try:
                    discount_value = float(discount_input.text().replace(",", ".")) if discount_input.text() else 0
                    if 0 <= discount_value < current_price:
                        new_price = current_price - discount_value
                        preview_label.setText(f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.2f} ‚ÇΩ")
                        preview_label.setStyleSheet("""
                            padding: 8px;
                            background: #e8f5e9;
                            border: 1px solid #4caf50;
                            border-radius: 4px;
                            color: #2e7d32;
                            font-weight: bold;
                        """)
                    else:
                        preview_label.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞!")
                        preview_label.setStyleSheet("""
                            padding: 8px;
                            background: #ffebee;
                            border: 1px solid #f44336;
                            border-radius: 4px;
                            color: #d32f2f;
                            font-weight: bold;
                        """)
                except ValueError:
                    preview_label.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞!")
                    preview_label.setStyleSheet("""
                        padding: 8px;
                        background: #ffebee;
                        border: 1px solid #f44336;
                        border-radius: 4px;
                        color: #d32f2f;
                        font-weight: bold;
                    """)
            
            discount_input.textChanged.connect(update_preview)
            main_layout.addWidget(discount_widget)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            main_layout.addStretch()
            
            # –ö–Ω–æ–ø–∫–∏
            buttons_layout = QHBoxLayout()
            buttons_layout.setSpacing(10)
            
            ok_btn = QPushButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å")
            ok_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4caf50;
                    color: white;
                    min-width: 120px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
            """)
            
            cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
            cancel_btn.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    min-width: 120px;
                }
                QPushButton:hover {
                    background-color: #da190b;
                }
            """)
            
            buttons_layout.addStretch()
            buttons_layout.addWidget(ok_btn)
            buttons_layout.addWidget(cancel_btn)
            buttons_layout.addStretch()
            
            main_layout.addLayout(buttons_layout)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            ok_btn.clicked.connect(dialog.accept)
            cancel_btn.clicked.connect(dialog.reject)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if dialog.exec() == QDialog.Accepted:
                new_qty = qty_input.value()
                try:
                    discount_value = float(discount_input.text().replace(",", ".")) if discount_input.text() else 0
                    if not (0 <= discount_value < item['price']):
                        raise ValueError("Invalid discount")
                except ValueError:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏.")
                    return
                
                item['quantity'] = new_qty
                item['price'] = current_price - discount_value
                self.update_cart_display()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥: {str(e)}")
    
    def remove_from_cart(self):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        current_row = self.cart_table.currentRow()
        if current_row >= 0:
            del self.cart_items[current_row]
            self.update_cart_display()
    
    def clear_cart(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        if self.cart_items:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            msg_box.setText("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?")
            msg_box.setIcon(QMessageBox.Question)
            
            yes_button = msg_box.addButton("–î–∞", QMessageBox.YesRole)
            no_button = msg_box.addButton("–ù–µ—Ç", QMessageBox.NoRole)
            
            msg_box.exec()

            if msg_box.clickedButton() == yes_button:
                self.cart_items.clear()
                self.update_cart_display()
    
    def checkout(self):
        """–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É"""
        if not self.cart_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        total = sum(item['quantity'] * item['price'] for item in self.cart_items)
        
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏")
        msg_box.setText(f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–∞ —Å—É–º–º—É {total:.2f} ‚ÇΩ?")
        msg_box.setIcon(QMessageBox.Question)
        
        yes_button = msg_box.addButton("–î–∞", QMessageBox.YesRole)
        no_button = msg_box.addButton("–ù–µ—Ç", QMessageBox.NoRole)
        
        msg_box.exec()
        
        if msg_box.clickedButton() == yes_button:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
            sale_items = [
                {
                    'part_id': item['part_id'],
                    'quantity': item['quantity'],
                    'price': item['price']
                }
                for item in self.cart_items
            ]
            
            if db.create_sale(sale_items):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", 
                    f"–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
                    f"–°—É–º–º–∞: {total:.2f} ‚ÇΩ\n"
                    f"–¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–∞.")
                
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                self.cart_items.clear()
                self.update_cart_display()
                self.load_products()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                if self.main_window:
                    self.main_window.refresh_all_data()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É!\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.")


class ReceiptsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞"""
    
    def __init__(self, main_window=None):
        super().__init__()
        self.main_window = main_window
        self.receipt_items = []  # –ü–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        
        # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–±–∏—Ä–∞–µ—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        table_stylesheet = """
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 6px;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
                text-decoration: none; /* –£–±–∏—Ä–∞–µ–º –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ */
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #2196F3;
                font-weight: bold;
            }
        """

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üì¶ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤")
        title.setProperty("class", "section-title")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        splitter = QSplitter(Qt.Horizontal)
        layout.addWidget(splitter)
        
        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –ò–°–¢–û–†–ò–Ø ===
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setContentsMargins(5, 0, 5, 0)
        
        history_label = QLabel("üìã –ò—Å—Ç–æ—Ä–∏—è")
        history_label.setProperty("class", "subsection-title")
        left_layout.addWidget(history_label)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
        self.receipts_table = QTableWidget()
        self.receipts_table.setColumnCount(3)
        self.receipts_table.setHorizontalHeaderLabels([
            "–î–∞—Ç–∞", "–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–°—É–º–º–∞"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        header = self.receipts_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # –î–∞—Ç–∞
        header.setSectionResizeMode(1, QHeaderView.Stretch)          # –ü–æ—Å—Ç–∞–≤—â–∏–∫  
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –°—É–º–º–∞
        
        self.receipts_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.receipts_table.doubleClicked.connect(self.show_receipt_details_from_history)
        self.receipts_table.setStyleSheet(table_stylesheet)
        left_layout.addWidget(self.receipts_table)
        
        splitter.addWidget(left_widget)
        
        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –†–ê–ë–û–ß–ê–Ø –û–ë–õ–ê–°–¢–¨ ===
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.setContentsMargins(5, 0, 5, 0)
        right_layout.setSpacing(10)
        
        # === 1. –§–û–†–ú–ê –ü–û–°–¢–ê–í–©–ò–ö–ê (–ö–û–ú–ü–ê–ö–¢–ù–ê–Ø) ===
        supplier_layout = QHBoxLayout()
        
        supplier_label = QLabel("–ü–æ—Å—Ç–∞–≤—â–∏–∫:")
        supplier_label.setMinimumWidth(80)
        supplier_layout.addWidget(supplier_label)
        
        self.supplier_input = QLineEdit()
        self.supplier_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")
        supplier_layout.addWidget(self.supplier_input)
        
        add_new_btn = QPushButton("‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä")
        add_new_btn.setProperty("class", "success")
        add_new_btn.clicked.connect(self.add_new_part)
        supplier_layout.addWidget(add_new_btn)
        
        right_layout.addLayout(supplier_layout)
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π)
        notes_layout = QHBoxLayout()
        notes_label = QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
        notes_label.setMinimumWidth(80)
        notes_layout.addWidget(notes_label)
        
        self.notes_input = QLineEdit()
        self.notes_input.setPlaceholderText("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
        notes_layout.addWidget(self.notes_input)
        
        right_layout.addLayout(notes_layout)
        
        # === 2. –ü–û–ò–°–ö –¢–û–í–ê–†–û–í ===
        search_layout = QHBoxLayout()
        search_label = QLabel("–ü–æ–∏—Å–∫:")
        search_label.setMinimumWidth(80)
        search_layout.addWidget(search_label)
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        self.search_input.textChanged.connect(self.search_parts)
        search_layout.addWidget(self.search_input)
        
        right_layout.addLayout(search_layout)
        
        # === 3. –¢–ê–ë–õ–ò–¶–ê –ü–û–ò–°–ö–ê (–£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø) ===
        search_label = QLabel("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è):")
        search_label.setProperty("class", "stat-label")
        right_layout.addWidget(search_label)
        
        self.parts_table = QTableWidget()
        self.parts_table.setColumnCount(3)
        self.parts_table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å—Ç–∞—Ç–æ–∫"
        ])
        
        parts_header = self.parts_table.horizontalHeader()
        parts_header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        parts_header.setSectionResizeMode(1, QHeaderView.Stretch)
        parts_header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        
        self.parts_table.setMaximumHeight(200)
        self.parts_table.setMinimumHeight(200)
        self.parts_table.setAlternatingRowColors(True)
        self.parts_table.doubleClicked.connect(self.add_part_from_table)
        self.parts_table.setStyleSheet(table_stylesheet)
        right_layout.addWidget(self.parts_table)
        
        # === 4. –¢–û–í–ê–†–´ –í –ü–û–°–¢–£–ü–õ–ï–ù–ò–ò (–£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø) ===
        items_label = QLabel("–¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏:")
        items_label.setProperty("class", "stat-label")
        right_layout.addWidget(items_label)
        
        self.receipt_items_table = QTableWidget()
        self.receipt_items_table.setColumnCount(6)
        self.receipt_items_table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞", ""
        ])
        
        items_header = self.receipt_items_table.horizontalHeader()
        items_header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        items_header.setSectionResizeMode(1, QHeaderView.Stretch)
        items_header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        items_header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        items_header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        items_header.setSectionResizeMode(5, QHeaderView.ResizeToContents)
        
        self.receipt_items_table.setAlternatingRowColors(True)
        self.receipt_items_table.setMinimumHeight(200)
        self.receipt_items_table.setStyleSheet(table_stylesheet)
        right_layout.addWidget(self.receipt_items_table)
        
        # === 5. –ò–¢–û–ì–ò –ò –ö–ù–û–ü–ö–ò ===
        bottom_layout = QHBoxLayout()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        self.total_label = QLabel("–ò—Ç–æ–≥–æ: 0.00 ‚ÇΩ")
        self.total_label.setProperty("class", "total")
        bottom_layout.addWidget(self.total_label)
        
        bottom_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.setProperty("class", "warning")
        clear_btn.clicked.connect(self.clear_receipt)
        bottom_layout.addWidget(clear_btn)
        
        save_btn = QPushButton("üíæ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        save_btn.setProperty("class", "success")
        save_btn.setProperty("class", "large")
        save_btn.clicked.connect(self.save_receipt)
        bottom_layout.addWidget(save_btn)
        
        right_layout.addLayout(bottom_layout)
        
        splitter.addWidget(right_widget)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π: –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è, —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å –±–æ–ª—å—à–∞—è
        splitter.setSizes([300, 700])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.receipt_items = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_receipts()
        self.load_parts()
    
    def load_receipts(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
        try:
            receipts = db.get_all_receipts()
            self.receipts_table.setRowCount(len(receipts))
            
            for row, receipt in enumerate(receipts):
                # –î–∞—Ç–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
                receipt_date = datetime.fromisoformat(receipt['date']).strftime("%d.%m.%Y")
                date_item = QTableWidgetItem(receipt_date)
                date_item.setData(Qt.UserRole, receipt['id'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
                self.receipts_table.setItem(row, 0, date_item)
                
                # –ü–æ—Å—Ç–∞–≤—â–∏–∫
                self.receipts_table.setItem(row, 1, QTableWidgetItem(receipt['supplier']))
                
                # –°—É–º–º–∞
                self.receipts_table.setItem(row, 2, QTableWidgetItem(f"{receipt['total']:,.2f} ‚ÇΩ"))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {e}")
    
    def load_parts(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        try:
            parts = db.get_all_parts()
            self.parts_table.setRowCount(len(parts))
            
            for row, part in enumerate(parts):
                article_item = QTableWidgetItem(part['article'])
                article_item.setData(Qt.UserRole, part)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = article_item.font()
                font.setStrikeOut(False)
                article_item.setFont(font)
                self.parts_table.setItem(row, 0, article_item)
                
                name_item = QTableWidgetItem(part['name'])
                font = name_item.font()
                font.setStrikeOut(False)
                name_item.setFont(font)
                self.parts_table.setItem(row, 1, name_item)
                
                qty_item = QTableWidgetItem(str(part['quantity']))
                font = qty_item.font()
                font.setStrikeOut(False)
                qty_item.setFont(font)
                self.parts_table.setItem(row, 2, qty_item)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    def search_parts(self):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        query = self.search_input.text().strip()
        if not query:
            self.load_parts()
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏–∑ –±–∞–∑—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Python-side —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            all_parts = db.get_all_parts()
            query_lower = query.lower()
            
            filtered_parts = []
            for part in all_parts:
                if (query_lower in part['article'].lower() or 
                    query_lower in part['name'].lower() or
                    query_lower in part['brand'].lower() or
                    query_lower in part['car_model'].lower() or
                    query_lower in part['category'].lower()):
                    filtered_parts.append(part)
            
            self.parts_table.setRowCount(len(filtered_parts))
            
            for row, part in enumerate(filtered_parts):
                article_item = QTableWidgetItem(part['article'])
                article_item.setData(Qt.UserRole, part)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = article_item.font()
                font.setStrikeOut(False)
                article_item.setFont(font)
                self.parts_table.setItem(row, 0, article_item)
                
                name_item = QTableWidgetItem(part['name'])
                font = name_item.font()
                font.setStrikeOut(False)
                name_item.setFont(font)
                self.parts_table.setItem(row, 1, name_item)
                
                qty_item = QTableWidgetItem(str(part['quantity']))
                font = qty_item.font()
                font.setStrikeOut(False)
                qty_item.setFont(font)
                self.parts_table.setItem(row, 2, qty_item)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def add_part_to_receipt(self, part):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É
            from PySide6.QtWidgets import QInputDialog
            
            quantity, ok = QInputDialog.getInt(
                self, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {part['article']}:",
                1  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            if not ok or quantity <= 0:
                return
            
            buy_price, ok = QInputDialog.getDouble(
                self, "–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞", 
                f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É {part['article']}:",
                part['buy_price'], 0.01, 999999.99, 2
            )
            
            if not ok or buy_price <= 0:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
            existing_item = None
            for item in self.receipt_items:
                if item['part_id'] == part['id']:
                    existing_item = item
                    break
            
            if existing_item:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                existing_item['quantity'] += quantity
                existing_item['buy_price'] = buy_price  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                self.receipt_items.append({
                    'part_id': part['id'],
                    'article': part['article'],
                    'name': part['name'],
                    'quantity': quantity,
                    'buy_price': buy_price
                })
            
            self.update_receipt_display()
            
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä: {e}")
    
    def update_receipt_display(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏"""
        self.receipt_items_table.setRowCount(len(self.receipt_items))
        
        total = 0
        for row, item in enumerate(self.receipt_items):
            item_total = item['quantity'] * item['buy_price']
            total += item_total
            
            self.receipt_items_table.setItem(row, 0, QTableWidgetItem(item['article']))
            self.receipt_items_table.setItem(row, 1, QTableWidgetItem(item['name']))
            self.receipt_items_table.setItem(row, 2, QTableWidgetItem(str(item['quantity'])))
            self.receipt_items_table.setItem(row, 3, QTableWidgetItem(f"{item['buy_price']:.2f} ‚ÇΩ"))
            self.receipt_items_table.setItem(row, 4, QTableWidgetItem(f"{item_total:.2f} ‚ÇΩ"))
            
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            remove_btn = QPushButton("‚ùå")
            remove_btn.setProperty("class", "danger")
            remove_btn.setProperty("class", "small")
            remove_btn.setMaximumWidth(35)
            remove_btn.clicked.connect(lambda checked, idx=row: self.remove_from_receipt(idx))
            self.receipt_items_table.setCellWidget(row, 5, remove_btn)
        
        self.total_label.setText(f"–ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ")
    
    def remove_from_receipt(self, index):
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
        if 0 <= index < len(self.receipt_items):
            del self.receipt_items[index]
            self.update_receipt_display()
    
    def clear_receipt(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        if self.receipt_items:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            msg_box.setText("–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ?")
            msg_box.setIcon(QMessageBox.Question)
            
            yes_button = msg_box.addButton("–î–∞", QMessageBox.YesRole)
            no_button = msg_box.addButton("–ù–µ—Ç", QMessageBox.NoRole)
            
            msg_box.exec()

            if msg_box.clickedButton() == yes_button:
                self.receipt_items.clear()
                self.supplier_input.clear()
                self.notes_input.clear()
                self.update_receipt_display()
    
    def show_receipt_details_from_history(self, index):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ"""
        if index.isValid():
            receipt_id = self.receipts_table.item(index.row(), 0).data(Qt.UserRole)
            if receipt_id:
                self.show_receipt_details(receipt_id)
    
    def add_part_from_table(self, index):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ"""
        if index.isValid():
            part = self.parts_table.item(index.row(), 0).data(Qt.UserRole)
            if part:
                self.add_part_to_receipt(part)
    
    def save_receipt(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        if not self.receipt_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ!")
            return
        
        supplier = self.supplier_input.text().strip()
        if not supplier:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        total = sum(item['quantity'] * item['buy_price'] for item in self.receipt_items)
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
            f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç '{supplier}' –Ω–∞ —Å—É–º–º—É {total:.2f} ‚ÇΩ?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            receipt_items = [
                {
                    'part_id': item['part_id'],
                    'quantity': item['quantity'],
                    'buy_price': item['buy_price']
                }
                for item in self.receipt_items
            ]
            
            notes = self.notes_input.text().strip()
            
            if db.create_receipt(supplier, receipt_items, notes):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", 
                    f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
                    f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n"
                    f"–°—É–º–º–∞: {total:.2f} ‚ÇΩ\n"
                    f"–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.")
                
                # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.receipt_items.clear()
                self.supplier_input.clear()
                self.notes_input.clear()
                self.update_receipt_display()
                self.load_receipts()
                self.load_parts()  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                if self.main_window:
                    self.main_window.refresh_all_data()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ!")
    
    def add_new_part(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
        dialog = AddPartDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.load_parts()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    
    def show_receipt_details(self, receipt_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
        try:
            items = db.get_receipt_items(receipt_id)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏
            dialog = QDialog(self)
            dialog.setWindowTitle(f"–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è #{receipt_id}")
            dialog.setModal(True)
            dialog.resize(600, 400)
            
            layout = QVBoxLayout(dialog)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            table = QTableWidget()
            table.setColumnCount(4)
            table.setHorizontalHeaderLabels(["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"])
            table.setRowCount(len(items))
            
            total = 0
            for row, item in enumerate(items):
                table.setItem(row, 0, QTableWidgetItem(item['article']))
                table.setItem(row, 1, QTableWidgetItem(item['name']))
                table.setItem(row, 2, QTableWidgetItem(str(item['quantity'])))
                table.setItem(row, 3, QTableWidgetItem(f"{item['buy_price']:,.2f} ‚ÇΩ"))
                total += item['quantity'] * item['buy_price']
            
            layout.addWidget(table)
            
            # –ò—Ç–æ–≥–æ
            total_label = QLabel(f"–ò—Ç–æ–≥–æ: {total:,.2f} ‚ÇΩ")
            total_label.setFont(QFont("Arial", 12, QFont.Bold))
            total_label.setAlignment(Qt.AlignRight)
            layout.addWidget(total_label)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            layout.addWidget(close_btn)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}")


class ReportsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #2E7D32; margin: 10px;")
        layout.addWidget(title)
        
        # Scroll area –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # –ë–ª–æ–∫: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QGridLayout(stats_group)
        
        self.stats_labels = {}
        stats_items = [
            ("total_parts", "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:", "0"),
            ("total_value", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞:", "0 ‚ÇΩ"),
            ("low_stock", "–¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º:", "0"),
            ("total_receipts", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:", "0"),
            ("total_sales", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:", "0"),
            ("total_revenue", "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:", "0 ‚ÇΩ"),
            ("total_profit", "–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:", "0 ‚ÇΩ"),
            ("profit_margin", "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:", "0%")
        ]
        
        for i, (key, label, default) in enumerate(stats_items):
            row, col = i // 2, (i % 2) * 2
            stats_layout.addWidget(QLabel(label), row, col)
            value_label = QLabel(default)
            value_label.setStyleSheet("font-weight: bold; color: #1976D2;")
            stats_layout.addWidget(value_label, row, col + 1)
            self.stats_labels[key] = value_label
        
        scroll_layout.addWidget(stats_group)
        
        # –ë–ª–æ–∫: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂
        sales_group = QGroupBox("üõí –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂")
        sales_layout = QVBoxLayout(sales_group)
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞—Ç
        filters_layout = QHBoxLayout()
        
        filters_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        self.date_from = QDateEdit()
        self.date_from.setDate(QDate.currentDate().addDays(-30))
        self.date_from.setCalendarPopup(True)
        filters_layout.addWidget(self.date_from)
        
        filters_layout.addWidget(QLabel("–ø–æ"))
        self.date_to = QDateEdit()
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setCalendarPopup(True)
        filters_layout.addWidget(self.date_to)
        
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_sales_report)
        filters_layout.addWidget(refresh_btn)
        
        filters_layout.addStretch()
        sales_layout.addLayout(filters_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂
        self.sales_table = QTableWidget()
        self.sales_table.setColumnCount(4)
        self.sales_table.setHorizontalHeaderLabels(["–î–∞—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π", "–°—É–º–º–∞", "–î–µ—Ç–∞–ª–∏"])
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.sales_table.horizontalHeader().setStretchLastSection(True)
        self.sales_table.setAlternatingRowColors(True)
        self.sales_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.sales_table.verticalHeader().setVisible(False)
        self.sales_table.setMinimumHeight(200)
        self.sales_table.setEditTriggers(QAbstractItemView.NoEditTriggers)  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        self.sales_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
        """)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.sales_table.setColumnWidth(0, 130)  # –î–∞—Ç–∞
        self.sales_table.setColumnWidth(1, 140)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.sales_table.setColumnWidth(2, 120)  # –°—É–º–º–∞
        self.sales_table.setColumnWidth(3, 120)  # –î–µ—Ç–∞–ª–∏
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.sales_table.verticalHeader().setDefaultSectionSize(40)
        
        sales_layout.addWidget(self.sales_table)
        
        scroll_layout.addWidget(sales_group)
        
        # –ë–ª–æ–∫: –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
        inventory_group = QGroupBox("üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")
        inventory_layout = QVBoxLayout(inventory_group)
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        inventory_filters = QHBoxLayout()
        
        self.low_stock_check = QCheckBox("–¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (‚â§ 2 —à—Ç.)")
        self.low_stock_check.stateChanged.connect(self.load_inventory_report)
        inventory_filters.addWidget(self.low_stock_check)
        
        inventory_filters.addStretch()
        inventory_layout.addLayout(inventory_filters)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.inventory_table = QTableWidget()
        self.inventory_table.setColumnCount(6)
        self.inventory_table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ])
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.inventory_table.horizontalHeader().setStretchLastSection(True)
        self.inventory_table.setAlternatingRowColors(True)
        self.inventory_table.verticalHeader().setVisible(False)
        self.inventory_table.setMinimumHeight(200)
        self.inventory_table.setEditTriggers(QAbstractItemView.NoEditTriggers)  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        self.inventory_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
        """)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.inventory_table.setColumnWidth(0, 120)  # –ê—Ä—Ç–∏–∫—É–ª
        self.inventory_table.setColumnWidth(1, 280)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        self.inventory_table.setColumnWidth(2, 140)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        self.inventory_table.setColumnWidth(3, 100)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.inventory_table.setColumnWidth(4, 120)  # –¶–µ–Ω–∞
        self.inventory_table.setColumnWidth(5, 140)  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.inventory_table.verticalHeader().setDefaultSectionSize(40)
        
        inventory_layout.addWidget(self.inventory_table)
        
        scroll_layout.addWidget(inventory_group)
        
        # –ë–ª–æ–∫: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        popular_group = QGroupBox("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
        popular_layout = QVBoxLayout(popular_group)
        
        self.popular_table = QTableWidget()
        self.popular_table.setColumnCount(5)
        self.popular_table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–¥–∞–Ω–æ (—à—Ç.)", "–í—ã—Ä—É—á–∫–∞", "–ü—Ä–∏–±—ã–ª—å"
        ])
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.popular_table.horizontalHeader().setStretchLastSection(True)
        self.popular_table.setAlternatingRowColors(True)
        self.popular_table.verticalHeader().setVisible(False)
        self.popular_table.setMinimumHeight(200)
        self.popular_table.setEditTriggers(QAbstractItemView.NoEditTriggers)  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        self.popular_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
            }
            QTableWidget::item:hover {
                background-color: #F5F5F5;
            }
        """)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.popular_table.setColumnWidth(0, 100)  # –ê—Ä—Ç–∏–∫—É–ª
        self.popular_table.setColumnWidth(1, 280)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        self.popular_table.setColumnWidth(2, 120)  # –ü—Ä–æ–¥–∞–Ω–æ
        self.popular_table.setColumnWidth(3, 120)  # –í—ã—Ä—É—á–∫–∞
        self.popular_table.setColumnWidth(4, 120)  # –ü—Ä–∏–±—ã–ª—å
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.popular_table.verticalHeader().setDefaultSectionSize(40)
        
        popular_layout.addWidget(self.popular_table)
        
        scroll_layout.addWidget(popular_group)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QHBoxLayout()
        export_layout.addStretch()
        
        export_btn = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞")
        export_btn.setMinimumSize(150, 40)
        export_btn.setMaximumSize(200, 40)
        export_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                font-weight: bold;
                font-size: 12px;
                padding: 8px 16px;
                border: none;
                border-radius: 6px;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:pressed {
                background-color: #E65100;
            }
        """)
        export_btn.clicked.connect(self.export_report)
        export_layout.addWidget(export_btn)
        
        scroll_layout.addLayout(export_layout)
        
        scroll.setWidget(scroll_widget)
        layout.addWidget(scroll)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_all_reports()
    
    def load_all_reports(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã"""
        self.load_statistics()
        self.load_sales_report()
        self.load_inventory_report()
        self.load_popular_items()
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            parts = db.get_all_parts()
            total_parts = len(parts)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–∞
            total_value = 0
            low_stock = 0
            for part in parts:
                try:
                    quantity = int(part.get('quantity', 0))
                    sell_price = float(part.get('sell_price', 0))
                    total_value += quantity * sell_price
                    
                    if quantity <= 2:
                        low_stock += 1
                except (ValueError, TypeError):
                    continue
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º
            receipts = db.get_all_receipts()
            total_receipts = len(receipts)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
            sales = db.get_all_sales()
            total_sales = len(sales)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏
            total_revenue = 0
            total_profit = 0
            
            for sale in sales:
                try:
                    sale_revenue = float(sale.get('total', 0))
                    total_revenue += sale_revenue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
                    sale_items = db.get_sale_items(sale['id'])
                    sale_cost = 0
                    
                    for item in sale_items:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                        part = db.get_part_by_id(item.get('part_id'))
                        if part:
                            buy_price = float(part.get('buy_price', 0))
                            quantity = int(item.get('quantity', 0))
                            sale_cost += buy_price * quantity
                    
                    sale_profit = sale_revenue - sale_cost
                    total_profit += sale_profit
                    
                except (ValueError, TypeError):
                    continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
            self.stats_labels['total_parts'].setText(str(total_parts))
            self.stats_labels['total_value'].setText(f"{total_value:,.2f} ‚ÇΩ")
            self.stats_labels['low_stock'].setText(str(low_stock))
            self.stats_labels['total_receipts'].setText(str(total_receipts))
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
            profit_margin = 0
            if total_revenue > 0:
                profit_margin = (total_profit / total_revenue) * 100
            
            self.stats_labels['total_sales'].setText(str(total_sales))
            self.stats_labels['total_revenue'].setText(f"{total_revenue:,.2f} ‚ÇΩ")
            self.stats_labels['total_profit'].setText(f"{total_profit:,.2f} ‚ÇΩ")
            self.stats_labels['profit_margin'].setText(f"{profit_margin:.1f}%")
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Ç–æ–≤–∞—Ä–æ–≤={total_parts}, –ø—Ä–æ–¥–∞–∂={total_sales}, –≤—ã—Ä—É—á–∫–∞={total_revenue:.2f}, –ø—Ä–∏–±—ã–ª—å={total_profit:.2f}, –º–∞—Ä–∂–∞={profit_margin:.1f}%")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            for key in self.stats_labels:
                if 'total_' in key and key.endswith(('_value', '_revenue', '_profit')):
                    self.stats_labels[key].setText("0.00 ‚ÇΩ")
                elif key == 'profit_margin':
                    self.stats_labels[key].setText("0%")
                else:
                    self.stats_labels[key].setText("0")
    
    def load_sales_report(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
        try:
            sales = db.get_all_sales()
            print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(sales)}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
            date_from = self.date_from.date().toPython()
            date_to = self.date_to.date().toPython()
            
            filtered_sales = []
            for sale in sales:
                try:
                    sale_date = datetime.fromisoformat(sale['date']).date()
                    if date_from <= sale_date <= date_to:
                        filtered_sales.append(sale)
                except (ValueError, KeyError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ {sale.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")
                    continue
            
            print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(filtered_sales)}")
            self.sales_table.setRowCount(len(filtered_sales))
            
            if not filtered_sales:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                self.sales_table.setRowCount(1)
                no_data_item = QTableWidgetItem("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                no_data_item.setTextAlignment(Qt.AlignCenter)
                no_data_item.setFlags(Qt.ItemIsEnabled)  # –î–µ–ª–∞–µ–º –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
                no_data_item.setBackground(QColor("#F5F5F5"))
                self.sales_table.setItem(0, 0, no_data_item)
                self.sales_table.setSpan(0, 0, 1, 4)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                self.sales_table.setRowHeight(0, 40)
                return
            
            for row, sale in enumerate(filtered_sales):
                try:
                    # –î–∞—Ç–∞
                    sale_date = datetime.fromisoformat(sale['date']).strftime("%d.%m.%Y %H:%M")
                    self.sales_table.setItem(row, 0, QTableWidgetItem(sale_date))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
                    self.sales_table.setItem(row, 1, QTableWidgetItem(str(sale.get('items_count', 0))))
                    
                    # –°—É–º–º–∞
                    total = float(sale.get('total', 0))
                    self.sales_table.setItem(row, 2, QTableWidgetItem(f"{total:,.2f} ‚ÇΩ"))
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π
                    details_btn = QPushButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
                    details_btn.setFixedSize(100, 28)
                    details_btn.setStyleSheet("""
                        QPushButton {
                            background-color: #2196F3;
                            color: white;
                            border: none;
                            padding: 4px 8px;
                            border-radius: 4px;
                            font-size: 11px;
                            font-weight: bold;
                        }
                        QPushButton:hover {
                            background-color: #1976D2;
                        }
                        QPushButton:pressed {
                            background-color: #0D47A1;
                        }
                    """)
                    details_btn.clicked.connect(lambda checked, s_id=sale['id']: self.show_sale_details(s_id))
                    self.sales_table.setCellWidget(row, 3, details_btn)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                    self.sales_table.setRowHeight(row, 40)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ {sale.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")
                    continue
            
            # –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ setup_ui
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.sales_table.setRowCount(1)
            error_item = QTableWidgetItem(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            error_item.setTextAlignment(Qt.AlignCenter)
            self.sales_table.setItem(0, 0, error_item)
            self.sales_table.setSpan(0, 0, 1, 4)
    
    def load_inventory_report(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
        try:
            parts = db.get_all_parts()
            print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: {len(parts)}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∏–∑–∫–æ–º—É –æ—Å—Ç–∞—Ç–∫—É
            if self.low_stock_check.isChecked():
                parts = [p for p in parts if p.get('quantity', 0) <= 2]
                print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –Ω–∏–∑–∫–æ–º—É –æ—Å—Ç–∞—Ç–∫—É: {len(parts)}")
            
            self.inventory_table.setRowCount(len(parts))
            
            if not parts:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.inventory_table.setRowCount(1)
                no_data_item = QTableWidgetItem("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                no_data_item.setTextAlignment(Qt.AlignCenter)
                self.inventory_table.setItem(0, 0, no_data_item)
                self.inventory_table.setSpan(0, 0, 1, 6)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã
                return
            
            for row, part in enumerate(parts):
                try:
                    # –ê—Ä—Ç–∏–∫—É–ª
                    self.inventory_table.setItem(row, 0, QTableWidgetItem(str(part.get('article', ''))))
                    
                    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    self.inventory_table.setItem(row, 1, QTableWidgetItem(str(part.get('name', ''))))
                    
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    self.inventory_table.setItem(row, 2, QTableWidgetItem(str(part.get('category', ''))))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∏–∑–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
                    quantity = int(part.get('quantity', 0))
                    qty_item = QTableWidgetItem(str(quantity))
                    qty_item.setTextAlignment(Qt.AlignCenter)
                    
                    if quantity <= 2:
                        # –í—ã–¥–µ–ª—è–µ–º –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                        qty_item.setData(Qt.ForegroundRole, QColor("#F44336"))
                        font = QFont()
                        font.setBold(True)
                        qty_item.setData(Qt.FontRole, font)
                    elif quantity <= 5:
                        # –°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ - –∂–µ–ª—Ç—ã–º
                        qty_item.setData(Qt.ForegroundRole, QColor("#FF9800"))
                    else:
                        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - –∑–µ–ª–µ–Ω—ã–º
                        qty_item.setData(Qt.ForegroundRole, QColor("#4CAF50"))
                    
                    self.inventory_table.setItem(row, 3, qty_item)
                    
                    # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
                    sell_price = float(part.get('sell_price', 0))
                    price_item = QTableWidgetItem(f"{sell_price:,.2f} ‚ÇΩ")
                    price_item.setTextAlignment(Qt.AlignRight)
                    self.inventory_table.setItem(row, 4, price_item)
                    
                    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    total_value = quantity * sell_price
                    total_item = QTableWidgetItem(f"{total_value:,.2f} ‚ÇΩ")
                    total_item.setTextAlignment(Qt.AlignRight)
                    # –í—ã–¥–µ–ª—è–µ–º –∫—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã
                    if total_value > 10000:
                        font = QFont()
                        font.setBold(True)
                        total_item.setData(Qt.FontRole, font)
                    self.inventory_table.setItem(row, 5, total_item)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                    self.inventory_table.setRowHeight(row, 40)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏ {part.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")
                    continue
            
            # –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ setup_ui
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.inventory_table.setRowCount(1)
            error_item = QTableWidgetItem(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            error_item.setTextAlignment(Qt.AlignCenter)
            self.inventory_table.setItem(0, 0, error_item)
            self.inventory_table.setSpan(0, 0, 1, 6)
    
    def load_popular_items(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            sales = db.get_all_sales()
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(sales)}")
            
            item_stats = {}
            
            for sale in sales:
                try:
                    items = db.get_sale_items(sale['id'])
                    for item in items:
                        part_id = item.get('part_id')
                        if part_id is None:
                            continue
                            
                        if part_id not in item_stats:
                            item_stats[part_id] = {
                                'article': item.get('article', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                'name': item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                                'total_qty': 0,
                                'total_revenue': 0,
                                'total_profit': 0
                            }
                        
                        quantity = int(item.get('quantity', 0))
                        price = float(item.get('price', 0))
                        revenue = quantity * price
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
                        part = db.get_part_by_id(part_id)
                        buy_price = 0
                        if part:
                            buy_price = float(part.get('buy_price', 0))
                        
                        cost = quantity * buy_price
                        profit = revenue - cost
                        
                        item_stats[part_id]['total_qty'] += quantity
                        item_stats[part_id]['total_revenue'] += revenue
                        item_stats[part_id]['total_profit'] += profit
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ {sale.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")
                    continue
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(item_stats)}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂
            sorted_items = sorted(item_stats.values(), key=lambda x: x['total_qty'], reverse=True)[:10]
            
            self.popular_table.setRowCount(len(sorted_items))
            
            if not sorted_items:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.popular_table.setRowCount(1)
                no_data_item = QTableWidgetItem("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
                no_data_item.setTextAlignment(Qt.AlignCenter)
                self.popular_table.setItem(0, 0, no_data_item)
                self.popular_table.setSpan(0, 0, 1, 5)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã
                return
            
            for row, item in enumerate(sorted_items):
                try:
                    # –ê—Ä—Ç–∏–∫—É–ª
                    self.popular_table.setItem(row, 0, QTableWidgetItem(str(item['article'])))
                    
                    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    self.popular_table.setItem(row, 1, QTableWidgetItem(str(item['name'])))
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
                    qty_item = QTableWidgetItem(str(item['total_qty']))
                    qty_item.setTextAlignment(Qt.AlignCenter)
                    # –í—ã–¥–µ–ª—è–µ–º —Ç–æ–ø-3 —Ç–æ–≤–∞—Ä–∞
                    if row < 3:
                        font = QFont()
                        font.setBold(True)
                        qty_item.setData(Qt.FontRole, font)
                        if row == 0:
                            qty_item.setData(Qt.ForegroundRole, QColor("#FFD700"))  # –ó–æ–ª–æ—Ç–æ–π
                        elif row == 1:
                            qty_item.setData(Qt.ForegroundRole, QColor("#C0C0C0"))  # –°–µ—Ä–µ–±—Ä–æ
                        else:
                            qty_item.setData(Qt.ForegroundRole, QColor("#CD7F32"))  # –ë—Ä–æ–Ω–∑–∞
                    self.popular_table.setItem(row, 2, qty_item)
                    
                    # –í—ã—Ä—É—á–∫–∞
                    revenue_item = QTableWidgetItem(f"{item['total_revenue']:,.2f} ‚ÇΩ")
                    revenue_item.setTextAlignment(Qt.AlignRight)
                    if row < 3:
                        font = QFont()
                        font.setBold(True)
                        revenue_item.setData(Qt.FontRole, font)
                    self.popular_table.setItem(row, 3, revenue_item)
                    
                    # –ü—Ä–∏–±—ã–ª—å
                    profit_item = QTableWidgetItem(f"{item['total_profit']:,.2f} ‚ÇΩ")
                    profit_item.setTextAlignment(Qt.AlignRight)
                    if row < 3:
                        font = QFont()
                        font.setBold(True)
                        profit_item.setData(Qt.FontRole, font)
                    # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏
                    if item['total_profit'] > 0:
                        profit_item.setData(Qt.ForegroundRole, QColor("#4CAF50"))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
                    elif item['total_profit'] < 0:
                        profit_item.setData(Qt.ForegroundRole, QColor("#F44336"))  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–±—ã—Ç–∫–∞
                    self.popular_table.setItem(row, 4, profit_item)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                    self.popular_table.setRowHeight(row, 40)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {row + 1}: {e}")
                    continue
            
            # –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ setup_ui
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.popular_table.setRowCount(1)
            error_item = QTableWidgetItem(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            error_item.setTextAlignment(Qt.AlignCenter)
            self.popular_table.setItem(0, 0, error_item)
            self.popular_table.setSpan(0, 0, 1, 5)
    
    def show_sale_details(self, sale_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            items = db.get_sale_items(sale_id)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏
            dialog = QDialog(self)
            dialog.setWindowTitle(f"üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ #{sale_id}")
            dialog.setModal(True)
            dialog.resize(700, 500)
            dialog.setStyleSheet("""
                QDialog {
                    background-color: #f8f9fa;
                }
            """)
            
            layout = QVBoxLayout(dialog)
            layout.setSpacing(15)
            layout.setContentsMargins(20, 20, 20, 20)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header_label = QLabel(f"üõí –ü—Ä–æ–¥–∞–∂–∞ #{sale_id}")
            header_label.setFont(QFont("Arial", 16, QFont.Bold))
            header_label.setStyleSheet("""
                QLabel {
                    color: #2E7D32;
                    padding: 10px;
                    background-color: white;
                    border-radius: 8px;
                    border: 1px solid #e0e0e0;
                }
            """)
            header_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(header_label)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            table = QTableWidget()
            table.setColumnCount(5)
            table.setHorizontalHeaderLabels(["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–°—É–º–º–∞"])
            table.setRowCount(len(items))
            
            # –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
            table.setStyleSheet("""
                QTableWidget {
                    background-color: white;
                    gridline-color: #e0e0e0;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                }
                QTableWidget::item {
                    padding: 10px;
                    border: none;
                }
                QTableWidget::item:selected {
                    background-color: #E3F2FD;
                    color: black;
                }
                QHeaderView::section {
                    background-color: #f5f5f5;
                    padding: 8px;
                    border: none;
                    border-bottom: 2px solid #2196F3;
                    font-weight: bold;
                }
            """)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table.horizontalHeader().setStretchLastSection(True)
            table.verticalHeader().setVisible(False)
            table.setAlternatingRowColors(True)
            table.setSelectionBehavior(QAbstractItemView.SelectRows)
            table.setEditTriggers(QAbstractItemView.NoEditTriggers)  # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            # –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
            table.setColumnWidth(0, 120)  # –ê—Ä—Ç–∏–∫—É–ª
            table.setColumnWidth(1, 250)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            table.setColumnWidth(2, 100)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            table.setColumnWidth(3, 120)  # –¶–µ–Ω–∞ –∑–∞ –µ–¥.
            table.setColumnWidth(4, 120)  # –°—É–º–º–∞
            
            total = 0
            for row, item in enumerate(items):
                # –ê—Ä—Ç–∏–∫—É–ª
                article_item = QTableWidgetItem(str(item.get('article', '')))
                article_item.setTextAlignment(Qt.AlignCenter)
                table.setItem(row, 0, article_item)
                
                # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                name_item = QTableWidgetItem(str(item.get('name', '')))
                table.setItem(row, 1, name_item)
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                quantity = int(item.get('quantity', 0))
                qty_item = QTableWidgetItem(f"{quantity} —à—Ç.")
                qty_item.setTextAlignment(Qt.AlignCenter)
                table.setItem(row, 2, qty_item)
                
                # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                price = float(item.get('price', 0))
                price_item = QTableWidgetItem(f"{price:,.2f} ‚ÇΩ")
                price_item.setTextAlignment(Qt.AlignRight)
                table.setItem(row, 3, price_item)
                
                # –°—É–º–º–∞ –∑–∞ –ø–æ–∑–∏—Ü–∏—é
                item_total = quantity * price
                total_item = QTableWidgetItem(f"{item_total:,.2f} ‚ÇΩ")
                total_item.setTextAlignment(Qt.AlignRight)
                total_item.setFont(QFont("Arial", 10, QFont.Bold))
                table.setItem(row, 4, total_item)
                
                total += item_total
                
                # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
                table.setRowHeight(row, 40)
            
            layout.addWidget(table)
            
            # –ë–ª–æ–∫ —Å –∏—Ç–æ–≥–∞–º–∏
            summary_widget = QWidget()
            summary_layout = QHBoxLayout(summary_widget)
            summary_widget.setStyleSheet("""
                QWidget {
                    background-color: white;
                    border-radius: 8px;
                    border: 1px solid #e0e0e0;
                }
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_layout = QVBoxLayout()
            
            items_count_label = QLabel(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(items)}")
            items_count_label.setFont(QFont("Arial", 11))
            stats_layout.addWidget(items_count_label)
            
            total_qty = sum(int(item.get('quantity', 0)) for item in items)
            total_qty_label = QLabel(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_qty} —à—Ç.")
            total_qty_label.setFont(QFont("Arial", 11))
            stats_layout.addWidget(total_qty_label)
            
            summary_layout.addLayout(stats_layout)
            summary_layout.addStretch()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
            total_label = QLabel(f"üí∞ –ò—Ç–æ–≥–æ: {total:,.2f} ‚ÇΩ")
            total_label.setFont(QFont("Arial", 14, QFont.Bold))
            total_label.setStyleSheet("""
                QLabel {
                    color: #2E7D32;
                    padding: 10px;
                    background-color: #E8F5E8;
                    border-radius: 6px;
                    border: 1px solid #4CAF50;
                }
            """)
            total_label.setAlignment(Qt.AlignCenter)
            summary_layout.addWidget(total_label)
            
            layout.addWidget(summary_widget)
            
            # –ö–Ω–æ–ø–∫–∏
            buttons_layout = QHBoxLayout()
            buttons_layout.addStretch()
            
            close_btn = QPushButton("‚úñ –ó–∞–∫—Ä—ã—Ç—å")
            close_btn.setFixedSize(120, 35)
            close_btn.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #d32f2f;
                }
                QPushButton:pressed {
                    background-color: #b71c1c;
                }
            """)
            close_btn.clicked.connect(dialog.accept)
            buttons_layout.addWidget(close_btn)
            
            layout.addLayout(buttons_layout)
            
            dialog.exec()
            
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
    
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")


class FullMainWindow(QMainWindow):
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üöó –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π v2.0 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.setMinimumSize(1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = get_settings()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        self.setStyleSheet(get_enhanced_complete_style())
        
        self.setup_menu_bar()
        self.setup_ui()
        self.setup_status_bar()
        self.load_window_settings()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        QTimer.singleShot(1000, self.show_startup_notifications)
    
    def setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üöó –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π")
        title_label.setObjectName("main_title")  # –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∏–∑ CSS
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_widget = self.create_notification_widget()
        layout.addWidget(self.notification_widget)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ó–∞–ø—á–∞—Å—Ç–∏" —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        self.parts_widget = PartsWidget(self)
        self.tab_widget.addTab(self.parts_widget, "üì¶ –ó–∞–ø—á–∞—Å—Ç–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ–¥–∞–∂–∏" —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        self.sales_widget = SalesWidget(self)
        self.tab_widget.addTab(self.sales_widget, "üí∞ –ü—Ä–æ–¥–∞–∂–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è" —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        self.receipts_widget = ReceiptsWidget(self)
        self.tab_widget.addTab(self.receipts_widget, "üì¶ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
        
        # –í–∫–ª–∞–¥–∫–∞ "–û—Ç—á–µ—Ç—ã" —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        self.reports_widget = ReportsWidget()
        self.tab_widget.addTab(self.reports_widget, "üìä –û—Ç—á—ë—Ç—ã")
    
    def setup_menu_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("üìÅ –§–∞–π–ª")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        export_action = QAction("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", self)
        export_action.setStatusTip("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª")
        export_action.triggered.connect(self.export_data)
        file_menu.addAction(export_action)
        
        # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
        backup_action = QAction("üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", self)
        backup_action.setStatusTip("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        backup_action.triggered.connect(self.create_backup)
        file_menu.addAction(backup_action)
        
        file_menu.addSeparator()
        
        # –í—ã—Ö–æ–¥
        exit_action = QAction("üö™ –í—ã—Ö–æ–¥", self)
        exit_action.setStatusTip("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–î–∞–Ω–Ω—ã–µ"
        data_menu = menubar.addMenu("üóÉÔ∏è –î–∞–Ω–Ω—ã–µ")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
        refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë", self)
        refresh_action.setStatusTip("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö")
        refresh_action.triggered.connect(self.refresh_all_data)
        data_menu.addAction(refresh_action)
        
        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = menubar.addMenu("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_settings_action = QAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", self)
        app_settings_action.setStatusTip("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        app_settings_action.triggered.connect(self.show_settings)
        settings_menu.addAction(app_settings_action)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = menubar.addMenu("‚ùì –°–ø—Ä–∞–≤–∫–∞")
        
        # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        about_action = QAction("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.setStatusTip("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def load_window_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
            geometry = self.settings.load_window_geometry("main")
            if geometry:
                self.restoreGeometry(geometry)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
            state = self.settings.load_window_state("main")
            if state:
                self.restoreState(state)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫–Ω–∞: {e}")
    
    def save_window_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞"""
        try:
            self.settings.save_window_geometry("main", self.saveGeometry())
            self.settings.save_window_state("main", self.saveState())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫–Ω–∞: {e}")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            result = show_settings_dialog(self)
            if result:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.refresh_all_data()
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{e}")
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        try:
            from datetime import datetime
            import shutil
            import os
            
            backup_dir = os.path.join(self.settings.app_data_dir, "backups")
            os.makedirs(backup_dir, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = os.path.join(backup_dir, f"autoparts_backup_{timestamp}.db")
            
            shutil.copy2(self.settings.database_path, backup_file)
            
            QMessageBox.information(
                self, "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", 
                f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n{backup_file}"
            )
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n{e}")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(
            self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            """
            <h2>üöó AutoParts v1.0</h2>
            <p><b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—è–º–∏</b></p>
            <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á—ë—Ç–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ –ø—Ä–æ–¥–∞–∂</p>
            <br>
            <p>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PySide6 –∏ SQLite</p>
            <p>¬© 2024 AutoParts Team</p>
            """
        )
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.save_window_settings()
        event.accept()
    
    def setup_status_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_status)
        self.timer.start(60000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M")
        self.status_bar.showMessage(f"‚è∞ {current_time} | ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∞")
    
    def refresh_all_data(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—á–∞—Å—Ç–∏
            if hasattr(self, 'parts_widget'):
                self.parts_widget.load_parts()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂–∏
            if hasattr(self, 'sales_widget'):
                self.sales_widget.load_products()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            if hasattr(self, 'receipts_widget'):
                self.receipts_widget.load_receipts()
                self.receipts_widget.load_parts()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
            if hasattr(self, 'reports_widget'):
                self.reports_widget.load_all_reports()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            self.check_low_stock()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def create_notification_widget(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notification_frame = QFrame()
        notification_frame.setStyleSheet("""
            QFrame {
                background-color: #FFF3CD;
                border: 2px solid #FFC107;
                border-radius: 5px;
                margin: 5px;
            }
        """)
        notification_frame.setVisible(False)  # –°–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        layout = QHBoxLayout(notification_frame)
        
        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warning_icon = QLabel("‚ö†Ô∏è")
        warning_icon.setStyleSheet("font-size: 20px; margin: 5px;")
        layout.addWidget(warning_icon)
        
        # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notification_text = QLabel("")
        self.notification_text.setStyleSheet("color: #856404; font-weight: bold; margin: 5px;")
        layout.addWidget(self.notification_text)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
        details_btn = QPushButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏")
        details_btn.setStyleSheet("""
            QPushButton {
                background-color: #FFC107;
                color: #212529;
                font-weight: bold;
                padding: 5px 10px;
                border: none;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #FFB300;
            }
        """)
        details_btn.clicked.connect(self.show_low_stock_details)
        layout.addWidget(details_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("‚ùå")
        close_btn.setMaximumWidth(30)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #856404;
                font-weight: bold;
                border: none;
            }
            QPushButton:hover {
                background-color: #F0D9A0;
                border-radius: 3px;
            }
        """)
        close_btn.clicked.connect(lambda: notification_frame.setVisible(False))
        layout.addWidget(close_btn)
        
        return notification_frame
    
    def check_low_stock(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        try:
            parts = db.get_all_parts()
            low_stock_parts = [p for p in parts if p['quantity'] <= 2 and p['quantity'] >= 0]
            
            if low_stock_parts:
                count = len(low_stock_parts)
                if count == 1:
                    text = f"1 —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!"
                elif count < 5:
                    text = f"{count} —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!"
                else:
                    text = f"{count} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!"
                
                self.notification_text.setText(text)
                self.notification_widget.setVisible(True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.status_bar.showMessage(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {text}")
                
                return low_stock_parts
            else:
                self.notification_widget.setVisible(False)
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return []
    
    def show_low_stock_details(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
        low_stock_parts = [p for p in db.get_all_parts() if p['quantity'] <= 2 and p['quantity'] >= 0]
        
        if not low_stock_parts:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏
        dialog = QDialog(self)
        dialog.setWindowTitle("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º")
        dialog.setModal(True)
        dialog.resize(800, 400)
        
        layout = QVBoxLayout(dialog)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(low_stock_parts)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (‚â§ 2 —à—Ç.):")
        header.setStyleSheet("font-weight: bold; color: #856404; margin: 10px;")
        layout.addWidget(header)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        table = QTableWidget()
        table.setColumnCount(6)
        table.setHorizontalHeaderLabels([
            "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û—Å—Ç–∞—Ç–æ–∫", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å"
        ])
        table.setRowCount(len(low_stock_parts))
        
        for row, part in enumerate(low_stock_parts):
            table.setItem(row, 0, QTableWidgetItem(part['article']))
            table.setItem(row, 1, QTableWidgetItem(part['name']))
            table.setItem(row, 2, QTableWidgetItem(part['category']))
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            qty_item = QTableWidgetItem(str(part['quantity']))
            if part['quantity'] == 0:
                qty_item.setBackground(QColor("#FF5252"))
                qty_item.setForeground(QColor("white"))
                status = "–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò"
            elif part['quantity'] == 1:
                qty_item.setBackground(QColor("#FF9800"))
                qty_item.setForeground(QColor("white"))
                status = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–û"
            else:
                qty_item.setBackground(QColor("#FFC107"))
                qty_item.setForeground(QColor("black"))
                status = "–ú–ê–õ–û"
            
            table.setItem(row, 3, qty_item)
            table.setItem(row, 4, QTableWidgetItem(f"{part['sell_price']:.2f} ‚ÇΩ"))
            
            status_item = QTableWidgetItem(status)
            # –£–±–∏—Ä–∞–µ–º setStyleSheet, —Ç–∞–∫ –∫–∞–∫ QTableWidgetItem –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ
            table.setItem(row, 5, status_item)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        table.horizontalHeader().setStretchLastSection(True)
        table.setAlternatingRowColors(True)
        layout.addWidget(table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º"
        receipts_btn = QPushButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        receipts_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        receipts_btn.clicked.connect(lambda: (dialog.accept(), self.tab_widget.setCurrentIndex(2)))
        buttons_layout.addWidget(receipts_btn)
        
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(dialog.accept)
        buttons_layout.addWidget(close_btn)
        
        layout.addLayout(buttons_layout)
        
        dialog.exec()
    
    def show_startup_notifications(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        low_stock_parts = self.check_low_stock()
        
        if low_stock_parts:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            msg = QMessageBox(self)
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            
            count = len(low_stock_parts)
            if count == 1:
                text = "–û–±–Ω–∞—Ä—É–∂–µ–Ω 1 —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º!"
            elif count < 5:
                text = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–∞ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º!"
            else:
                text = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º!"
            
            msg.setText(text)
            msg.setInformativeText("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
            
            # –ö–Ω–æ–ø–∫–∏
            details_btn = msg.addButton("üìã –î–µ—Ç–∞–ª–∏", QMessageBox.ActionRole)
            receipts_btn = msg.addButton("üì¶ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", QMessageBox.ActionRole)
            later_btn = msg.addButton("‚è∞ –ü–æ–∑–∂–µ", QMessageBox.RejectRole)
            
            msg.exec()
            
            if msg.clickedButton() == details_btn:
                self.show_low_stock_details()
            elif msg.clickedButton() == receipts_btn:
                self.tab_widget.setCurrentIndex(2)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    app.setApplicationName("AutoParts Full")
    app.setApplicationDisplayName("–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    
    try:
        window = FullMainWindow()
        window.show()
        
        print("üöÄ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db.db_path}")
        
        sys.exit(app.exec())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")
        sys.exit(1)

if __name__ == "__main__":
    main()