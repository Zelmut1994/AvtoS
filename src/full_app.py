"""–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π"""
import sys
from datetime import datetime

# --- –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã ---
try:
    import resources_rc
except ImportError:
    print("‚ö†Ô∏è –§–∞–π–ª —Ä–µ—Å—É—Ä—Å–æ–≤ (resources_rc.py) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç scripts/compile_resources.py")
# --------------------------------------------------

from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QTabWidget, QPushButton, QLabel, 
                             QMessageBox, QDialog, QFormLayout, QLineEdit,
                             QSpinBox, QDoubleSpinBox, QTextEdit, QTableWidget,
                             QTableWidgetItem, QHeaderView, QComboBox,
                             QAbstractItemView, QSplitter, QDateEdit, QGroupBox,
                             QScrollArea, QFrame, QGridLayout, QCheckBox,
                             QTreeView)
from PySide6.QtCore import Qt, QTimer, QDate
from PySide6.QtGui import (QFont, QAction, QColor, QStandardItemModel,
                           QStandardItem)
from datetime import datetime, timedelta

from database_simple import db
from styles_enhanced import get_enhanced_complete_style, ENHANCED_COLORS, ICONS, ENHANCED_DIALOG_STYLES
from settings_manager import get_settings
from settings_dialog import show_settings_dialog
from parts_dialogs import AddPartDialog, EditPartDialog

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
APP_NAME = "–°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π"

class PartsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç—è–º–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, main_window=None):
        super().__init__()
        self.main_window = main_window
        self.setup_ui()
        self.load_parts()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∏—Å–∫
        header_layout = QHBoxLayout()
        
        title = QLabel("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç—è–º–∏")
        title.setProperty("class", "section-title")
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É, –Ω–∞–∑–≤–∞–Ω–∏—é, –º–∞—Ä–∫–µ...")
        self.search_input.setMaximumWidth(300)
        self.search_input.textChanged.connect(self.filter_parts)
        header_layout.addWidget(self.search_input)
        
        layout.addLayout(header_layout)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        buttons_layout = QHBoxLayout()
        
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
        add_btn.setProperty("class", "success")
        add_btn.clicked.connect(self.add_part)
        buttons_layout.addWidget(add_btn)
        
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.setProperty("class", "warning")
        edit_btn.clicked.connect(self.edit_part)
        buttons_layout.addWidget(edit_btn)
        
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_btn.setProperty("class", "danger")
        delete_btn.clicked.connect(self.delete_part)
        buttons_layout.addWidget(delete_btn)
        
        buttons_layout.addStretch()
        
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_parts)
        buttons_layout.addWidget(refresh_btn)
        
        layout.addLayout(buttons_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.parts_table = QTableWidget()
        self.parts_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.parts_table.setAlternatingRowColors(True)
        self.parts_table.setSortingEnabled(True)
        self.parts_table.doubleClicked.connect(self.edit_part)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        headers = ["ID", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", 
                  "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª-–≤–æ", "–ó–∞–∫—É–ø. —Ü–µ–Ω–∞", "–†–æ–∑–Ω. —Ü–µ–Ω–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"]
        self.parts_table.setColumnCount(len(headers))
        self.parts_table.setHorizontalHeaderLabels(headers)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É ID
        self.parts_table.setColumnHidden(0, True)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        header = self.parts_table.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(2, QHeaderView.Stretch)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        
        layout.addWidget(self.parts_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = QLabel()
        self.stats_label.setProperty("class", "info-text")
        layout.addWidget(self.stats_label)
    
    def load_parts(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        parts = db.get_all_parts()
        
        self.parts_table.setRowCount(len(parts))
        
        for row, part in enumerate(parts):
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã
            items = [
                QTableWidgetItem(str(part['id'])),
                QTableWidgetItem(part['article']),
                QTableWidgetItem(part['name']),
                QTableWidgetItem(part['brand']),
                QTableWidgetItem(part['car_model']),
                QTableWidgetItem(part['category']),
                QTableWidgetItem(str(part['quantity'])),
                QTableWidgetItem(f"{float(part['buy_price']):.2f} ‚ÇΩ"),
                QTableWidgetItem(f"{float(part['sell_price']):.2f} ‚ÇΩ"),
                QTableWidgetItem(part['description'] or "")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
            for col, item in enumerate(items):
                self.parts_table.setItem(row, col, item)
            
            # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
            if part['quantity'] <= 5:
                for col in range(len(items)):
                    self.parts_table.item(row, col).setBackground(QColor("#fff3cd"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_stats(parts)
    
    def update_stats(self, parts):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_parts = len(parts)
        total_value = sum(float(part['sell_price']) * part['quantity'] for part in parts)
        low_stock = sum(1 for part in parts if part['quantity'] <= 5)
        
        stats_text = (f"üìä –í—Å–µ–≥–æ –∑–∞–ø—á–∞—Å—Ç–µ–π: {total_parts} | "
                     f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} ‚ÇΩ | "
                     f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {low_stock}")
        
        self.stats_label.setText(stats_text)
    
    def filter_parts(self):
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_text = self.search_input.text().lower()
        
        for row in range(self.parts_table.rowCount()):
            show_row = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É (–∫—Ä–æ–º–µ ID)
            for col in range(1, self.parts_table.columnCount()):
                item = self.parts_table.item(row, col)
                if item and search_text in item.text().lower():
                    show_row = True
                    break
            
            self.parts_table.setRowHidden(row, not show_row)
    
    def add_part(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø—á–∞—Å—Ç—å"""
        dialog = AddPartDialog(self)
        if dialog.exec() == QDialog.Accepted:
            self.load_parts()
    
    def edit_part(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å"""
        current_row = self.parts_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—á–∞—Å—Ç–∏
        part_id = int(self.parts_table.item(current_row, 0).text())
        part_data = db.get_part_by_id(part_id)
        
        if part_data:
            dialog = EditPartDialog(part_data, self)
            if dialog.exec() == QDialog.Accepted:
                self.load_parts()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏")
    
    def delete_part(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å"""
        current_row = self.parts_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
        article = self.parts_table.item(current_row, 1).text()
        name = self.parts_table.item(current_row, 2).text()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        reply = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å:\n{article} - {name}?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            part_id = int(self.parts_table.item(current_row, 0).text())
            
            if db.delete_part(part_id):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø—á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                self.load_parts()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")


class StatisticsWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.load_statistics()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        title.setProperty("class", "section-title")
        layout.addWidget(title)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_scroll = QScrollArea()
        stats_scroll.setWidgetResizable(True)
        stats_widget = QWidget()
        stats_layout = QVBoxLayout(stats_widget)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.general_stats = self.create_stats_group("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout.addWidget(self.general_stats)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.category_stats = self.create_stats_group("üè∑Ô∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        stats_layout.addWidget(self.category_stats)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
        self.brand_stats = self.create_stats_group("üöó –ü–æ –º–∞—Ä–∫–∞–º")
        stats_layout.addWidget(self.brand_stats)
        
        # –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        self.low_stock_stats = self.create_stats_group("‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏")
        stats_layout.addWidget(self.low_stock_stats)
        
        stats_scroll.setWidget(stats_widget)
        layout.addWidget(stats_scroll)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        refresh_btn.clicked.connect(self.load_statistics)
        layout.addWidget(refresh_btn)
    
    def create_stats_group(self, title):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        group = QGroupBox(title)
        layout = QVBoxLayout(group)
        
        content_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        content_label.setWordWrap(True)
        layout.addWidget(content_label)
        
        return group
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        parts = db.get_all_parts()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.update_general_stats(parts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.update_category_stats(parts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
        self.update_brand_stats(parts)
        
        # –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        self.update_low_stock_stats(parts)
    
    def update_general_stats(self, parts):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_parts = len(parts)
        total_quantity = sum(part['quantity'] for part in parts)
        total_buy_value = sum(float(part['buy_price']) * part['quantity'] for part in parts)
        total_sell_value = sum(float(part['sell_price']) * part['quantity'] for part in parts)
        potential_profit = total_sell_value - total_buy_value
        
        stats_text = f"""
        üî¢ –í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π: {total_parts}
        üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç.
        üí∏ –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_buy_value:.2f} ‚ÇΩ
        üí∞ –†–æ–∑–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_sell_value:.2f} ‚ÇΩ
        üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit:.2f} ‚ÇΩ
        """
        
        layout = self.general_stats.layout()
        label = layout.itemAt(0).widget()
        label.setText(stats_text.strip())
    
    def update_category_stats(self, parts):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        categories = {}
        
        for part in parts:
            category = part['category']
            if category not in categories:
                categories[category] = {'count': 0, 'quantity': 0, 'value': 0}
            
            categories[category]['count'] += 1
            categories[category]['quantity'] += part['quantity']
            categories[category]['value'] += float(part['sell_price']) * part['quantity']
        
        stats_lines = []
        for category, stats in sorted(categories.items()):
            stats_lines.append(
                f"‚Ä¢ {category}: {stats['count']} –Ω–∞–∏–º., "
                f"{stats['quantity']} —à—Ç., {stats['value']:.2f} ‚ÇΩ"
            )
        
        layout = self.category_stats.layout()
        label = layout.itemAt(0).widget()
        label.setText('\n'.join(stats_lines) if stats_lines else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    def update_brand_stats(self, parts):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ä–∫–∞–º"""
        brands = {}
        
        for part in parts:
            brand = part['brand']
            if brand not in brands:
                brands[brand] = {'count': 0, 'quantity': 0, 'value': 0}
            
            brands[brand]['count'] += 1
            brands[brand]['quantity'] += part['quantity']
            brands[brand]['value'] += float(part['sell_price']) * part['quantity']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_brands = sorted(brands.items(), key=lambda x: x[1]['value'], reverse=True)
        
        stats_lines = []
        for brand, stats in sorted_brands[:10]:  # –¢–æ–ø 10
            stats_lines.append(
                f"‚Ä¢ {brand}: {stats['count']} –Ω–∞–∏–º., "
                f"{stats['quantity']} —à—Ç., {stats['value']:.2f} ‚ÇΩ"
            )
        
        layout = self.brand_stats.layout()
        label = layout.itemAt(0).widget()
        label.setText('\n'.join(stats_lines) if stats_lines else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    def update_low_stock_stats(self, parts):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        low_stock_parts = [part for part in parts if part['quantity'] <= 5]
        low_stock_parts.sort(key=lambda x: x['quantity'])
        
        if low_stock_parts:
            stats_lines = []
            for part in low_stock_parts[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 20 –ø–æ–∑–∏—Ü–∏–π
                stats_lines.append(
                    f"‚Ä¢ {part['article']} ({part['name']}): {part['quantity']} —à—Ç."
                )
            
            stats_text = f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(low_stock_parts)} –ø–æ–∑–∏—Ü–∏–π —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º:\n\n" + '\n'.join(stats_lines)
        else:
            stats_text = "‚úÖ –í—Å–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!"
        
        layout = self.low_stock_stats.layout()
        label = layout.itemAt(0).widget()
        label.setText(stats_text)


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle(APP_NAME)
        self.setMinimumSize(1200, 800)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.init_database()
        
        self.setup_ui()
        self.setup_menu()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet(get_enhanced_complete_style())
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = QLabel(f"üöó {APP_NAME}")
        header.setProperty("class", "main-title")
        layout.addWidget(header)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setProperty("class", "main-tabs")
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç—è–º–∏
        self.parts_widget = PartsWidget(self)
        self.tabs.addTab(self.parts_widget, "üîß –ó–∞–ø—á–∞—Å—Ç–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_widget = StatisticsWidget()
        self.tabs.addTab(self.stats_widget, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        layout.addWidget(self.tabs)
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("üìÅ –§–∞–π–ª")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_action = QAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self)
        settings_action.triggered.connect(self.show_settings)
        file_menu.addAction(settings_action)
        
        file_menu.addSeparator()
        
        # –í—ã—Ö–æ–¥
        exit_action = QAction("üö™ –í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = menubar.addMenu("‚ùì –°–ø—Ä–∞–≤–∫–∞")
        
        about_action = QAction("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        show_settings_dialog(self)
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(
            self, 
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            f"""
            <h3>{APP_NAME}</h3>
            <p>–í–µ—Ä—Å–∏—è: 1.0.0</p>
            <p>–ü—Ä–æ—Å—Ç–∞—è –∏ —É–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É—á—ë—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π</p>
            <p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b></p>
            <ul>
                <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π</li>
                <li>–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</li>
                <li>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</li>
                <li>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞—Ç–∫–æ–≤</li>
            </ul>
            """
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    app.setApplicationName(APP_NAME)
    app.setApplicationVersion("1.0.0")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    window = MainWindow()
    window.show()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
