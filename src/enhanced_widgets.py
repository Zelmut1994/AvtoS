# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

from PySide6.QtWidgets import *
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont, QPixmap, QIcon
from styles_enhanced import ENHANCED_COLORS, ICONS

class StatCard(QFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, title, value, icon="üìä", color="primary"):
        super().__init__()
        self.setProperty("class", "stat-card")
        self.setup_ui(title, value, icon, color)
    
    def setup_ui(self, title, value, icon, color):
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_layout = QHBoxLayout()
        
        icon_label = QLabel(icon)
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setStyleSheet(f"font-size: 20pt; color: {ENHANCED_COLORS.get(color, '#2196F3')};")
        header_layout.addWidget(icon_label)
        
        title_label = QLabel(title)
        title_label.setProperty("class", "stat-label")
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(str(value))
        value_label.setProperty("class", "stat-value")
        value_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(value_label)
    
    def update_value(self, new_value):
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        value_label = self.findChild(QLabel)
        if value_label and hasattr(value_label, 'property') and value_label.property("class") == "stat-value":
            value_label.setText(str(new_value))

class EnhancedNotificationBar(QFrame):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setProperty("class", "notification")
        self.setup_ui()
    
    def setup_ui(self):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        icon_label = QLabel("‚ö†Ô∏è")
        icon_label.setStyleSheet("font-size: 18pt;")
        layout.addWidget(icon_label)
        
        # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.message_label = QLabel()
        self.message_label.setStyleSheet("font-weight: 500; color: #FF8F00;")
        layout.addWidget(self.message_label)
        
        layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self.action_button = QPushButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
        self.action_button.setProperty("class", "small")
        self.action_button.setProperty("class", "warning")
        layout.addWidget(self.action_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("‚ùå")
        close_button.setProperty("class", "small")
        close_button.setMaximumWidth(30)
        close_button.clicked.connect(self.hide)
        layout.addWidget(close_button)
    
    def set_message(self, message, action_callback=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
        self.message_label.setText(message)
        
        if action_callback:
            self.action_button.clicked.connect(action_callback)
            self.action_button.show()
        else:
            self.action_button.hide()

class ModernSearchBar(QFrame):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, placeholder="–ü–æ–∏—Å–∫...", parent=None):
        super().__init__(parent)
        self.setProperty("class", "card")
        self.setup_ui(placeholder)
    
    def setup_ui(self, placeholder):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 5, 10, 5)
        
        # –ò–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞
        search_icon = QLabel("üîç")
        search_icon.setStyleSheet("font-size: 16pt; color: #757575;")
        layout.addWidget(search_icon)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText(placeholder)
        self.search_input.setStyleSheet("border: none; background: transparent; font-size: 10pt;")
        layout.addWidget(self.search_input)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_button = QPushButton("‚ùå")
        self.clear_button.setProperty("class", "small")
        self.clear_button.setMaximumWidth(25)
        self.clear_button.clicked.connect(self.clear_search)
        self.clear_button.hide()
        layout.addWidget(self.clear_button)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–µ–∫—Å—Ç–∞
        self.search_input.textChanged.connect(self.on_text_changed)
    
    def on_text_changed(self, text):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏"""
        if text:
            self.clear_button.show()
        else:
            self.clear_button.hide()
    
    def clear_search(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"""
        self.search_input.clear()
    
    def get_text(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞"""
        return self.search_input.text()
    
    def connect_search(self, callback):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å callback –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞"""
        self.search_input.textChanged.connect(callback)

class ActionButtonGroup(QFrame):
    """–ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
    
    def __init__(self, buttons_config, parent=None):
        super().__init__(parent)
        self.setProperty("class", "card")
        self.setup_ui(buttons_config)
    
    def setup_ui(self, buttons_config):
        layout = QHBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        for config in buttons_config:
            button = QPushButton(config['text'])
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            if 'class' in config:
                button.setProperty("class", config['class'])
            
            if 'callback' in config:
                button.clicked.connect(config['callback'])
            
            if 'enabled' in config:
                button.setEnabled(config['enabled'])
            
            if 'tooltip' in config:
                button.setToolTip(config['tooltip'])
            
            layout.addWidget(button)
        
        layout.addStretch()

class DataTable(QTableWidget):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, headers, parent=None):
        super().__init__(parent)
        self.setup_table(headers)
    
    def setup_table(self, headers):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        self.setColumnCount(len(headers))
        self.setHorizontalHeaderLabels(headers)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header = self.horizontalHeader()
        for i, header_text in enumerate(headers):
            if i == 0:  # ID –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
                header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
            elif "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" in header_text or "–ù–∞–∑–≤–∞–Ω–∏–µ" in header_text:
                header.setSectionResizeMode(i, QHeaderView.Stretch)
            else:
                header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.setAlternatingRowColors(True)
        self.setSortingEnabled(True)
    
    def add_data_row(self, data, row_color=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        row = self.rowCount()
        self.insertRow(row)
        
        for col, value in enumerate(data):
            item = QTableWidgetItem(str(value))
            self.setItem(row, col, item)
            
            if row_color:
                item.setBackground(row_color)
    
    def clear_data(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        self.setRowCount(0)

class SummaryPanel(QFrame):
    """–ü–∞–Ω–µ–ª—å —Å–≤–æ–¥–∫–∏"""
    
    def __init__(self, title, parent=None):
        super().__init__(parent)
        self.setProperty("class", "card")
        self.setup_ui(title)
    
    def setup_ui(self, title):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setProperty("class", "subsection-title")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        self.stats_layout = QHBoxLayout()
        layout.addLayout(self.stats_layout)
    
    def add_stat(self, title, value, icon="üìä", color="primary"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stat_card = StatCard(title, value, icon, color)
        self.stats_layout.addWidget(stat_card)
        return stat_card
    
    def add_spacer(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        self.stats_layout.addStretch()

class ModernDialog(QDialog):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
    
    def __init__(self, title, parent=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setModal(True)
        self.setMinimumSize(400, 300)
        self.setup_base_ui()
    
    def setup_base_ui(self):
        """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI"""
        self.main_layout = QVBoxLayout(self)
        self.main_layout.setSpacing(20)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.content_frame = QFrame()
        self.content_frame.setProperty("class", "card")
        self.content_layout = QVBoxLayout(self.content_frame)
        self.main_layout.addWidget(self.content_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self.button_layout = QHBoxLayout()
        self.button_layout.addStretch()
        self.main_layout.addLayout(self.button_layout)
    
    def add_content_widget(self, widget):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        self.content_layout.addWidget(widget)
    
    def add_button(self, text, callback, button_class=""):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É"""
        button = QPushButton(text)
        if button_class:
            button.setProperty("class", button_class)
        button.clicked.connect(callback)
        self.button_layout.addWidget(button)
        return button

class ProgressCard(QFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    
    def __init__(self, title, current, maximum, unit="", parent=None):
        super().__init__(parent)
        self.setProperty("class", "card")
        self.setup_ui(title, current, maximum, unit)
    
    def setup_ui(self, title, current, maximum, unit):
        layout = QVBoxLayout(self)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setProperty("class", "stat-label")
        layout.addWidget(title_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = QProgressBar()
        self.progress.setMaximum(maximum)
        self.progress.setValue(current)
        self.progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid #E0E0E0;
                border-radius: 8px;
                text-align: center;
                background: #F5F5F5;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                            stop: 0 #4CAF50, stop: 1 #2E7D32);
                border-radius: 6px;
            }
        """)
        layout.addWidget(self.progress)
        
        # –ó–Ω–∞—á–µ–Ω–∏—è
        self.value_label = QLabel(f"{current} / {maximum} {unit}")
        self.value_label.setProperty("class", "stat-value")
        self.value_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.value_label)
    
    def update_progress(self, current, maximum=None, unit=""):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        if maximum is not None:
            self.progress.setMaximum(maximum)
        
        self.progress.setValue(current)
        max_val = maximum if maximum is not None else self.progress.maximum()
        self.value_label.setText(f"{current} / {max_val} {unit}") 